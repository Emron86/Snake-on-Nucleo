
C:\Users\Emil\Dropbox\workspaces\stm32\Snake\Debug\Snake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021d0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002368  08002368  00012368  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002390  08002390  00012390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002394  08002394  00012394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000508  20000000  08002398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000009c  20000508  080028a0  00020508  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200005a4  080028a0  000205a4  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020508  2**0
                  CONTENTS, READONLY
  9 .debug_line   00002a69  00000000  00000000  00020538  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00007b63  00000000  00000000  00022fa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000014f4  00000000  00000000  0002ab04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000530  00000000  00000000  0002bff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000730  00000000  00000000  0002c528  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002ba2  00000000  00000000  0002cc58  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001de7  00000000  00000000  0002f7fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  000315e1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000f94  00000000  00000000  00031660  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000508 	.word	0x20000508
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002350 	.word	0x08002350

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000050c 	.word	0x2000050c
 80001d4:	08002350 	.word	0x08002350

080001d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80001d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000210 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80001dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80001de:	e003      	b.n	80001e8 <LoopCopyDataInit>

080001e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80001e0:	4b0c      	ldr	r3, [pc, #48]	; (8000214 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80001e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80001e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80001e6:	3104      	adds	r1, #4

080001e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80001e8:	480b      	ldr	r0, [pc, #44]	; (8000218 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80001ea:	4b0c      	ldr	r3, [pc, #48]	; (800021c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80001ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80001ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80001f0:	d3f6      	bcc.n	80001e0 <CopyDataInit>
  ldr  r2, =_sbss
 80001f2:	4a0b      	ldr	r2, [pc, #44]	; (8000220 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80001f4:	e002      	b.n	80001fc <LoopFillZerobss>

080001f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80001f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80001f8:	f842 3b04 	str.w	r3, [r2], #4

080001fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80001fc:	4b09      	ldr	r3, [pc, #36]	; (8000224 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80001fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000200:	d3f9      	bcc.n	80001f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000202:	f001 fcb3 	bl	8001b6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000206:	f001 fcd7 	bl	8001bb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800020a:	f001 faa7 	bl	800175c <main>
  bx  lr    
 800020e:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000210:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8000214:	08002398 	.word	0x08002398
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000218:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800021c:	20000508 	.word	0x20000508
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000220:	20000508 	.word	0x20000508
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000224:	200005a4 	.word	0x200005a4

08000228 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000228:	e7fe      	b.n	8000228 <ADC_IRQHandler>
	...

0800022c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800022c:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800022e:	4b08      	ldr	r3, [pc, #32]	; (8000250 <HAL_InitTick+0x24>)
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000230:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000232:	6818      	ldr	r0, [r3, #0]
 8000234:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000238:	fbb0 f0f3 	udiv	r0, r0, r3
 800023c:	f000 f886 	bl	800034c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000240:	2200      	movs	r2, #0
 8000242:	4621      	mov	r1, r4
 8000244:	f04f 30ff 	mov.w	r0, #4294967295
 8000248:	f000 f84c 	bl	80002e4 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 800024c:	2000      	movs	r0, #0
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000000 	.word	0x20000000

08000254 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000254:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000256:	4b0b      	ldr	r3, [pc, #44]	; (8000284 <HAL_Init+0x30>)
 8000258:	681a      	ldr	r2, [r3, #0]
 800025a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800025e:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000260:	681a      	ldr	r2, [r3, #0]
 8000262:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000266:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000268:	681a      	ldr	r2, [r3, #0]
 800026a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800026e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000270:	2003      	movs	r0, #3
 8000272:	f000 f825 	bl	80002c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000276:	2000      	movs	r0, #0
 8000278:	f7ff ffd8 	bl	800022c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800027c:	f001 fc16 	bl	8001aac <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8000280:	2000      	movs	r0, #0
 8000282:	bd08      	pop	{r3, pc}
 8000284:	40023c00 	.word	0x40023c00

08000288 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000288:	4a02      	ldr	r2, [pc, #8]	; (8000294 <HAL_IncTick+0xc>)
 800028a:	6813      	ldr	r3, [r2, #0]
 800028c:	3301      	adds	r3, #1
 800028e:	6013      	str	r3, [r2, #0]
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	2000055c 	.word	0x2000055c

08000298 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000298:	4b01      	ldr	r3, [pc, #4]	; (80002a0 <HAL_GetTick+0x8>)
 800029a:	6818      	ldr	r0, [r3, #0]
}
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	2000055c 	.word	0x2000055c

080002a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002a4:	b513      	push	{r0, r1, r4, lr}
 80002a6:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0U;
  tickstart = HAL_GetTick();
 80002a8:	f7ff fff6 	bl	8000298 <HAL_GetTick>
 80002ac:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80002ae:	f7ff fff3 	bl	8000298 <HAL_GetTick>
 80002b2:	9b01      	ldr	r3, [sp, #4]
 80002b4:	1b00      	subs	r0, r0, r4
 80002b6:	4298      	cmp	r0, r3
 80002b8:	d3f9      	bcc.n	80002ae <HAL_Delay+0xa>
  {
  }
}
 80002ba:	b002      	add	sp, #8
 80002bc:	bd10      	pop	{r4, pc}
	...

080002c0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002c0:	4a07      	ldr	r2, [pc, #28]	; (80002e0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80002c2:	68d3      	ldr	r3, [r2, #12]
 80002c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80002c8:	041b      	lsls	r3, r3, #16
 80002ca:	0c1b      	lsrs	r3, r3, #16
 80002cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80002d0:	0200      	lsls	r0, r0, #8
 80002d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002d6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80002da:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80002dc:	60d3      	str	r3, [r2, #12]
 80002de:	4770      	bx	lr
 80002e0:	e000ed00 	.word	0xe000ed00

080002e4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002e4:	4b17      	ldr	r3, [pc, #92]	; (8000344 <HAL_NVIC_SetPriority+0x60>)
 80002e6:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002e8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002ec:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002ee:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002f2:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002f4:	2c04      	cmp	r4, #4
 80002f6:	bf28      	it	cs
 80002f8:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002fa:	2d06      	cmp	r5, #6

  return (
 80002fc:	f04f 0501 	mov.w	r5, #1
 8000300:	fa05 f404 	lsl.w	r4, r5, r4
 8000304:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000308:	bf8c      	ite	hi
 800030a:	3b03      	subhi	r3, #3
 800030c:	2300      	movls	r3, #0

  return (
 800030e:	400c      	ands	r4, r1
 8000310:	409c      	lsls	r4, r3
 8000312:	fa05 f303 	lsl.w	r3, r5, r3
 8000316:	3b01      	subs	r3, #1
 8000318:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800031a:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800031c:	ea42 0204 	orr.w	r2, r2, r4
 8000320:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000324:	bfaf      	iteee	ge
 8000326:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800032a:	f000 000f 	andlt.w	r0, r0, #15
 800032e:	4b06      	ldrlt	r3, [pc, #24]	; (8000348 <HAL_NVIC_SetPriority+0x64>)
 8000330:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000332:	bfa5      	ittet	ge
 8000334:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000338:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800033a:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800033c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	bf00      	nop
 8000344:	e000ed00 	.word	0xe000ed00
 8000348:	e000ed14 	.word	0xe000ed14

0800034c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800034c:	3801      	subs	r0, #1
 800034e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000352:	d20a      	bcs.n	800036a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000354:	4b06      	ldr	r3, [pc, #24]	; (8000370 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000356:	4a07      	ldr	r2, [pc, #28]	; (8000374 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000358:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800035a:	21f0      	movs	r1, #240	; 0xf0
 800035c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000360:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000362:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000364:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000366:	601a      	str	r2, [r3, #0]
 8000368:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 800036a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	e000e010 	.word	0xe000e010
 8000374:	e000ed00 	.word	0xe000ed00

08000378 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000378:	4b04      	ldr	r3, [pc, #16]	; (800038c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800037a:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800037c:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800037e:	bf0c      	ite	eq
 8000380:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000384:	f022 0204 	bicne.w	r2, r2, #4
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	4770      	bx	lr
 800038c:	e000e010 	.word	0xe000e010

08000390 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000390:	4770      	bx	lr

08000392 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000392:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000394:	f7ff fffc 	bl	8000390 <HAL_SYSTICK_Callback>
 8000398:	bd08      	pop	{r3, pc}
	...

0800039c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800039c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80003a0:	4f62      	ldr	r7, [pc, #392]	; (800052c <HAL_GPIO_Init+0x190>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003a2:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003a4:	f8df c18c 	ldr.w	ip, [pc, #396]	; 8000534 <HAL_GPIO_Init+0x198>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80003a8:	b085      	sub	sp, #20

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 80003aa:	f04f 0801 	mov.w	r8, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003ae:	9301      	str	r3, [sp, #4]
 80003b0:	46be      	mov	lr, r7
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80003b2:	2300      	movs	r3, #0
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 80003b4:	9a01      	ldr	r2, [sp, #4]

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 80003b6:	fa08 f503 	lsl.w	r5, r8, r3
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 80003ba:	ea35 0202 	bics.w	r2, r5, r2
 80003be:	f040 80ad 	bne.w	800051c <HAL_GPIO_Init+0x180>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80003c2:	684c      	ldr	r4, [r1, #4]
 80003c4:	f024 0a10 	bic.w	sl, r4, #16
 80003c8:	f1ba 0f02 	cmp.w	sl, #2
 80003cc:	d114      	bne.n	80003f8 <HAL_GPIO_Init+0x5c>
 80003ce:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 80003d2:	eb00 0989 	add.w	r9, r0, r9, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80003d6:	f003 0b07 	and.w	fp, r3, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80003da:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80003de:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80003e2:	220f      	movs	r2, #15
 80003e4:	fa02 f20b 	lsl.w	r2, r2, fp
 80003e8:	ea26 0602 	bic.w	r6, r6, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80003ec:	690a      	ldr	r2, [r1, #16]
 80003ee:	fa02 f20b 	lsl.w	r2, r2, fp
 80003f2:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3U] = temp;
 80003f4:	f8c9 2020 	str.w	r2, [r9, #32]
 80003f8:	ea4f 0b43 	mov.w	fp, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003fc:	f04f 0903 	mov.w	r9, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000400:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000402:	fa09 f90b 	lsl.w	r9, r9, fp
 8000406:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800040a:	f004 0603 	and.w	r6, r4, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800040e:	ea02 0209 	and.w	r2, r2, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000412:	fa06 f60b 	lsl.w	r6, r6, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000416:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800041a:	4332      	orrs	r2, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800041c:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 8000420:	6002      	str	r2, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000422:	d80f      	bhi.n	8000444 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000424:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000426:	68ce      	ldr	r6, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000428:	ea09 0202 	and.w	r2, r9, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 800042c:	fa06 f60b 	lsl.w	r6, r6, fp
 8000430:	4316      	orrs	r6, r2
        GPIOx->OSPEEDR = temp;
 8000432:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000434:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000436:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2U));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800043a:	ea22 0205 	bic.w	r2, r2, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800043e:	409e      	lsls	r6, r3
 8000440:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8000442:	6042      	str	r2, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000444:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000446:	ea09 0902 	and.w	r9, r9, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800044a:	688a      	ldr	r2, [r1, #8]
 800044c:	fa02 f20b 	lsl.w	r2, r2, fp
 8000450:	ea42 0209 	orr.w	r2, r2, r9
      GPIOx->PUPDR = temp;
 8000454:	60c2      	str	r2, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000456:	00e2      	lsls	r2, r4, #3
 8000458:	d560      	bpl.n	800051c <HAL_GPIO_Init+0x180>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800045a:	2200      	movs	r2, #0
 800045c:	9203      	str	r2, [sp, #12]
 800045e:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000462:	4a33      	ldr	r2, [pc, #204]	; (8000530 <HAL_GPIO_Init+0x194>)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000464:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000468:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 800046c:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
 8000470:	f023 0903 	bic.w	r9, r3, #3
 8000474:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 8000478:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 800047c:	f509 399c 	add.w	r9, r9, #79872	; 0x13800
 8000480:	9603      	str	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000482:	f003 0a03 	and.w	sl, r3, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000486:	9e03      	ldr	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000488:	f8d9 b008 	ldr.w	fp, [r9, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800048c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000490:	260f      	movs	r6, #15
 8000492:	fa06 f60a 	lsl.w	r6, r6, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000496:	4290      	cmp	r0, r2
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000498:	ea2b 0606 	bic.w	r6, fp, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800049c:	d012      	beq.n	80004c4 <HAL_GPIO_Init+0x128>
 800049e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80004a2:	4290      	cmp	r0, r2
 80004a4:	d010      	beq.n	80004c8 <HAL_GPIO_Init+0x12c>
 80004a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80004aa:	4290      	cmp	r0, r2
 80004ac:	d00e      	beq.n	80004cc <HAL_GPIO_Init+0x130>
 80004ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80004b2:	4290      	cmp	r0, r2
 80004b4:	d00c      	beq.n	80004d0 <HAL_GPIO_Init+0x134>
 80004b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80004ba:	4290      	cmp	r0, r2
 80004bc:	bf14      	ite	ne
 80004be:	2207      	movne	r2, #7
 80004c0:	2204      	moveq	r2, #4
 80004c2:	e006      	b.n	80004d2 <HAL_GPIO_Init+0x136>
 80004c4:	2200      	movs	r2, #0
 80004c6:	e004      	b.n	80004d2 <HAL_GPIO_Init+0x136>
 80004c8:	2201      	movs	r2, #1
 80004ca:	e002      	b.n	80004d2 <HAL_GPIO_Init+0x136>
 80004cc:	2202      	movs	r2, #2
 80004ce:	e000      	b.n	80004d2 <HAL_GPIO_Init+0x136>
 80004d0:	2203      	movs	r2, #3
 80004d2:	fa02 f20a 	lsl.w	r2, r2, sl
 80004d6:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80004d8:	f8c9 2008 	str.w	r2, [r9, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80004dc:	683a      	ldr	r2, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 80004de:	43ee      	mvns	r6, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80004e0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 80004e4:	bf0c      	ite	eq
 80004e6:	4032      	andeq	r2, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 80004e8:	432a      	orrne	r2, r5
        }
        EXTI->IMR = temp;
 80004ea:	f8ce 2000 	str.w	r2, [lr]

        temp = EXTI->EMR;
 80004ee:	f8de 2004 	ldr.w	r2, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80004f2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 80004f6:	bf0c      	ite	eq
 80004f8:	4032      	andeq	r2, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 80004fa:	432a      	orrne	r2, r5
        }
        EXTI->EMR = temp;
 80004fc:	607a      	str	r2, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80004fe:	68ba      	ldr	r2, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000500:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8000504:	bf0c      	ite	eq
 8000506:	4032      	andeq	r2, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8000508:	432a      	orrne	r2, r5
        }
        EXTI->RTSR = temp;
 800050a:	f8ce 2008 	str.w	r2, [lr, #8]

        temp = EXTI->FTSR;
 800050e:	f8de 200c 	ldr.w	r2, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000512:	02a4      	lsls	r4, r4, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8000514:	bf54      	ite	pl
 8000516:	4032      	andpl	r2, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8000518:	432a      	orrmi	r2, r5
        }
        EXTI->FTSR = temp;
 800051a:	60fa      	str	r2, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800051c:	3301      	adds	r3, #1
 800051e:	2b10      	cmp	r3, #16
 8000520:	f47f af48 	bne.w	80003b4 <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8000524:	b005      	add	sp, #20
 8000526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800052a:	bf00      	nop
 800052c:	40013c00 	.word	0x40013c00
 8000530:	40020000 	.word	0x40020000
 8000534:	40023800 	.word	0x40023800

08000538 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000538:	6903      	ldr	r3, [r0, #16]
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 800053a:	4219      	tst	r1, r3
}
 800053c:	bf14      	ite	ne
 800053e:	2001      	movne	r0, #1
 8000540:	2000      	moveq	r0, #0
 8000542:	4770      	bx	lr

08000544 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000544:	b902      	cbnz	r2, 8000548 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000546:	0409      	lsls	r1, r1, #16
 8000548:	6181      	str	r1, [r0, #24]
 800054a:	4770      	bx	lr

0800054c <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800054c:	6803      	ldr	r3, [r0, #0]
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800054e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000552:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000554:	07d8      	lsls	r0, r3, #31
 8000556:	d403      	bmi.n	8000560 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000558:	6823      	ldr	r3, [r4, #0]
 800055a:	0799      	lsls	r1, r3, #30
 800055c:	d44b      	bmi.n	80005f6 <HAL_RCC_OscConfig+0xaa>
 800055e:	e09b      	b.n	8000698 <HAL_RCC_OscConfig+0x14c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000560:	4b8c      	ldr	r3, [pc, #560]	; (8000794 <HAL_RCC_OscConfig+0x248>)
 8000562:	689a      	ldr	r2, [r3, #8]
 8000564:	f002 020c 	and.w	r2, r2, #12
 8000568:	2a04      	cmp	r2, #4
 800056a:	d007      	beq.n	800057c <HAL_RCC_OscConfig+0x30>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800056c:	689a      	ldr	r2, [r3, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800056e:	f002 020c 	and.w	r2, r2, #12
 8000572:	2a08      	cmp	r2, #8
 8000574:	d10b      	bne.n	800058e <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	025a      	lsls	r2, r3, #9
 800057a:	d508      	bpl.n	800058e <HAL_RCC_OscConfig+0x42>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800057c:	4b85      	ldr	r3, [pc, #532]	; (8000794 <HAL_RCC_OscConfig+0x248>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	039b      	lsls	r3, r3, #14
 8000582:	d5e9      	bpl.n	8000558 <HAL_RCC_OscConfig+0xc>
 8000584:	6863      	ldr	r3, [r4, #4]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d1e6      	bne.n	8000558 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 800058a:	2001      	movs	r0, #1
 800058c:	e164      	b.n	8000858 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800058e:	6863      	ldr	r3, [r4, #4]
 8000590:	4d80      	ldr	r5, [pc, #512]	; (8000794 <HAL_RCC_OscConfig+0x248>)
 8000592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000596:	d006      	beq.n	80005a6 <HAL_RCC_OscConfig+0x5a>
 8000598:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800059c:	d108      	bne.n	80005b0 <HAL_RCC_OscConfig+0x64>
 800059e:	682b      	ldr	r3, [r5, #0]
 80005a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005a4:	602b      	str	r3, [r5, #0]
 80005a6:	682b      	ldr	r3, [r5, #0]
 80005a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005ac:	602b      	str	r3, [r5, #0]
 80005ae:	e008      	b.n	80005c2 <HAL_RCC_OscConfig+0x76>
 80005b0:	682a      	ldr	r2, [r5, #0]
 80005b2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80005b6:	602a      	str	r2, [r5, #0]
 80005b8:	682a      	ldr	r2, [r5, #0]
 80005ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80005be:	602a      	str	r2, [r5, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80005c0:	b16b      	cbz	r3, 80005de <HAL_RCC_OscConfig+0x92>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80005c2:	f7ff fe69 	bl	8000298 <HAL_GetTick>
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005c6:	4d73      	ldr	r5, [pc, #460]	; (8000794 <HAL_RCC_OscConfig+0x248>)
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80005c8:	4606      	mov	r6, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005ca:	682b      	ldr	r3, [r5, #0]
 80005cc:	039f      	lsls	r7, r3, #14
 80005ce:	d4c3      	bmi.n	8000558 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005d0:	f7ff fe62 	bl	8000298 <HAL_GetTick>
 80005d4:	1b80      	subs	r0, r0, r6
 80005d6:	2864      	cmp	r0, #100	; 0x64
 80005d8:	d9f7      	bls.n	80005ca <HAL_RCC_OscConfig+0x7e>
          {
            return HAL_TIMEOUT;
 80005da:	2003      	movs	r0, #3
 80005dc:	e13c      	b.n	8000858 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80005de:	f7ff fe5b 	bl	8000298 <HAL_GetTick>
 80005e2:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005e4:	682b      	ldr	r3, [r5, #0]
 80005e6:	0398      	lsls	r0, r3, #14
 80005e8:	d5b6      	bpl.n	8000558 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005ea:	f7ff fe55 	bl	8000298 <HAL_GetTick>
 80005ee:	1b80      	subs	r0, r0, r6
 80005f0:	2864      	cmp	r0, #100	; 0x64
 80005f2:	d9f7      	bls.n	80005e4 <HAL_RCC_OscConfig+0x98>
 80005f4:	e7f1      	b.n	80005da <HAL_RCC_OscConfig+0x8e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80005f6:	4b67      	ldr	r3, [pc, #412]	; (8000794 <HAL_RCC_OscConfig+0x248>)
 80005f8:	689a      	ldr	r2, [r3, #8]
 80005fa:	f012 0f0c 	tst.w	r2, #12
 80005fe:	d007      	beq.n	8000610 <HAL_RCC_OscConfig+0xc4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000600:	689a      	ldr	r2, [r3, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000602:	f002 020c 	and.w	r2, r2, #12
 8000606:	2a08      	cmp	r2, #8
 8000608:	d117      	bne.n	800063a <HAL_RCC_OscConfig+0xee>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	0259      	lsls	r1, r3, #9
 800060e:	d414      	bmi.n	800063a <HAL_RCC_OscConfig+0xee>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000610:	4b60      	ldr	r3, [pc, #384]	; (8000794 <HAL_RCC_OscConfig+0x248>)
 8000612:	681a      	ldr	r2, [r3, #0]
 8000614:	0792      	lsls	r2, r2, #30
 8000616:	d502      	bpl.n	800061e <HAL_RCC_OscConfig+0xd2>
 8000618:	68e2      	ldr	r2, [r4, #12]
 800061a:	2a01      	cmp	r2, #1
 800061c:	d1b5      	bne.n	800058a <HAL_RCC_OscConfig+0x3e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800061e:	681a      	ldr	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000620:	21f8      	movs	r1, #248	; 0xf8
 8000622:	fa91 f1a1 	rbit	r1, r1
 8000626:	6920      	ldr	r0, [r4, #16]
 8000628:	fab1 f181 	clz	r1, r1
 800062c:	fa00 f101 	lsl.w	r1, r0, r1
 8000630:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000634:	430a      	orrs	r2, r1
 8000636:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000638:	e02e      	b.n	8000698 <HAL_RCC_OscConfig+0x14c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800063a:	68e2      	ldr	r2, [r4, #12]
 800063c:	4b56      	ldr	r3, [pc, #344]	; (8000798 <HAL_RCC_OscConfig+0x24c>)
 800063e:	b1ea      	cbz	r2, 800067c <HAL_RCC_OscConfig+0x130>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000640:	2201      	movs	r2, #1
 8000642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000644:	f7ff fe28 	bl	8000298 <HAL_GetTick>

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000648:	4d52      	ldr	r5, [pc, #328]	; (8000794 <HAL_RCC_OscConfig+0x248>)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800064a:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800064c:	682b      	ldr	r3, [r5, #0]
 800064e:	4851      	ldr	r0, [pc, #324]	; (8000794 <HAL_RCC_OscConfig+0x248>)
 8000650:	079b      	lsls	r3, r3, #30
 8000652:	d405      	bmi.n	8000660 <HAL_RCC_OscConfig+0x114>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000654:	f7ff fe20 	bl	8000298 <HAL_GetTick>
 8000658:	1b80      	subs	r0, r0, r6
 800065a:	2802      	cmp	r0, #2
 800065c:	d9f6      	bls.n	800064c <HAL_RCC_OscConfig+0x100>
 800065e:	e7bc      	b.n	80005da <HAL_RCC_OscConfig+0x8e>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000660:	6803      	ldr	r3, [r0, #0]
 8000662:	22f8      	movs	r2, #248	; 0xf8
 8000664:	fa92 f2a2 	rbit	r2, r2
 8000668:	6921      	ldr	r1, [r4, #16]
 800066a:	fab2 f282 	clz	r2, r2
 800066e:	fa01 f202 	lsl.w	r2, r1, r2
 8000672:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000676:	4313      	orrs	r3, r2
 8000678:	6003      	str	r3, [r0, #0]
 800067a:	e00d      	b.n	8000698 <HAL_RCC_OscConfig+0x14c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800067c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800067e:	f7ff fe0b 	bl	8000298 <HAL_GetTick>
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000682:	4d44      	ldr	r5, [pc, #272]	; (8000794 <HAL_RCC_OscConfig+0x248>)
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000684:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000686:	682b      	ldr	r3, [r5, #0]
 8000688:	079f      	lsls	r7, r3, #30
 800068a:	d505      	bpl.n	8000698 <HAL_RCC_OscConfig+0x14c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800068c:	f7ff fe04 	bl	8000298 <HAL_GetTick>
 8000690:	1b80      	subs	r0, r0, r6
 8000692:	2802      	cmp	r0, #2
 8000694:	d9f7      	bls.n	8000686 <HAL_RCC_OscConfig+0x13a>
 8000696:	e7a0      	b.n	80005da <HAL_RCC_OscConfig+0x8e>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000698:	6823      	ldr	r3, [r4, #0]
 800069a:	071e      	lsls	r6, r3, #28
 800069c:	d403      	bmi.n	80006a6 <HAL_RCC_OscConfig+0x15a>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800069e:	6823      	ldr	r3, [r4, #0]
 80006a0:	075d      	lsls	r5, r3, #29
 80006a2:	d548      	bpl.n	8000736 <HAL_RCC_OscConfig+0x1ea>
 80006a4:	e01f      	b.n	80006e6 <HAL_RCC_OscConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80006a6:	6962      	ldr	r2, [r4, #20]
 80006a8:	4b3c      	ldr	r3, [pc, #240]	; (800079c <HAL_RCC_OscConfig+0x250>)
 80006aa:	b172      	cbz	r2, 80006ca <HAL_RCC_OscConfig+0x17e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80006ac:	2201      	movs	r2, #1
 80006ae:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80006b0:	f7ff fdf2 	bl	8000298 <HAL_GetTick>
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006b4:	4d37      	ldr	r5, [pc, #220]	; (8000794 <HAL_RCC_OscConfig+0x248>)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80006b6:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006b8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80006ba:	0798      	lsls	r0, r3, #30
 80006bc:	d4ef      	bmi.n	800069e <HAL_RCC_OscConfig+0x152>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006be:	f7ff fdeb 	bl	8000298 <HAL_GetTick>
 80006c2:	1b80      	subs	r0, r0, r6
 80006c4:	2802      	cmp	r0, #2
 80006c6:	d9f7      	bls.n	80006b8 <HAL_RCC_OscConfig+0x16c>
 80006c8:	e787      	b.n	80005da <HAL_RCC_OscConfig+0x8e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80006ca:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80006cc:	f7ff fde4 	bl	8000298 <HAL_GetTick>
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006d0:	4d30      	ldr	r5, [pc, #192]	; (8000794 <HAL_RCC_OscConfig+0x248>)
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80006d2:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006d4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80006d6:	0799      	lsls	r1, r3, #30
 80006d8:	d5e1      	bpl.n	800069e <HAL_RCC_OscConfig+0x152>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006da:	f7ff fddd 	bl	8000298 <HAL_GetTick>
 80006de:	1b80      	subs	r0, r0, r6
 80006e0:	2802      	cmp	r0, #2
 80006e2:	d9f7      	bls.n	80006d4 <HAL_RCC_OscConfig+0x188>
 80006e4:	e779      	b.n	80005da <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	9301      	str	r3, [sp, #4]
 80006ea:	4b2a      	ldr	r3, [pc, #168]	; (8000794 <HAL_RCC_OscConfig+0x248>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80006ec:	4d2c      	ldr	r5, [pc, #176]	; (80007a0 <HAL_RCC_OscConfig+0x254>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80006ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80006f4:	641a      	str	r2, [r3, #64]	; 0x40
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fc:	9301      	str	r3, [sp, #4]
 80006fe:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000700:	682b      	ldr	r3, [r5, #0]
 8000702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000706:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8000708:	f7ff fdc6 	bl	8000298 <HAL_GetTick>
 800070c:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800070e:	682b      	ldr	r3, [r5, #0]
 8000710:	05da      	lsls	r2, r3, #23
 8000712:	d513      	bpl.n	800073c <HAL_RCC_OscConfig+0x1f0>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000714:	68a3      	ldr	r3, [r4, #8]
 8000716:	4d1f      	ldr	r5, [pc, #124]	; (8000794 <HAL_RCC_OscConfig+0x248>)
 8000718:	2b01      	cmp	r3, #1
 800071a:	d115      	bne.n	8000748 <HAL_RCC_OscConfig+0x1fc>
 800071c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800071e:	f043 0301 	orr.w	r3, r3, #1
 8000722:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000724:	f7ff fdb8 	bl	8000298 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000728:	4d1a      	ldr	r5, [pc, #104]	; (8000794 <HAL_RCC_OscConfig+0x248>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800072a:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800072c:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000730:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000732:	079b      	lsls	r3, r3, #30
 8000734:	d519      	bpl.n	800076a <HAL_RCC_OscConfig+0x21e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000736:	69a2      	ldr	r2, [r4, #24]
 8000738:	bba2      	cbnz	r2, 80007a4 <HAL_RCC_OscConfig+0x258>
 800073a:	e072      	b.n	8000822 <HAL_RCC_OscConfig+0x2d6>
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800073c:	f7ff fdac 	bl	8000298 <HAL_GetTick>
 8000740:	1b80      	subs	r0, r0, r6
 8000742:	2802      	cmp	r0, #2
 8000744:	d9e3      	bls.n	800070e <HAL_RCC_OscConfig+0x1c2>
 8000746:	e748      	b.n	80005da <HAL_RCC_OscConfig+0x8e>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000748:	2b05      	cmp	r3, #5
 800074a:	d104      	bne.n	8000756 <HAL_RCC_OscConfig+0x20a>
 800074c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800074e:	f043 0304 	orr.w	r3, r3, #4
 8000752:	672b      	str	r3, [r5, #112]	; 0x70
 8000754:	e7e2      	b.n	800071c <HAL_RCC_OscConfig+0x1d0>
 8000756:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000758:	f022 0201 	bic.w	r2, r2, #1
 800075c:	672a      	str	r2, [r5, #112]	; 0x70
 800075e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000760:	f022 0204 	bic.w	r2, r2, #4
 8000764:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000766:	b133      	cbz	r3, 8000776 <HAL_RCC_OscConfig+0x22a>
 8000768:	e7dc      	b.n	8000724 <HAL_RCC_OscConfig+0x1d8>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800076a:	f7ff fd95 	bl	8000298 <HAL_GetTick>
 800076e:	1b80      	subs	r0, r0, r6
 8000770:	42b8      	cmp	r0, r7
 8000772:	d9dd      	bls.n	8000730 <HAL_RCC_OscConfig+0x1e4>
 8000774:	e731      	b.n	80005da <HAL_RCC_OscConfig+0x8e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000776:	f7ff fd8f 	bl	8000298 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800077a:	f241 3788 	movw	r7, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800077e:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000780:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000782:	0798      	lsls	r0, r3, #30
 8000784:	d5d7      	bpl.n	8000736 <HAL_RCC_OscConfig+0x1ea>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000786:	f7ff fd87 	bl	8000298 <HAL_GetTick>
 800078a:	1b80      	subs	r0, r0, r6
 800078c:	42b8      	cmp	r0, r7
 800078e:	d9f7      	bls.n	8000780 <HAL_RCC_OscConfig+0x234>
 8000790:	e723      	b.n	80005da <HAL_RCC_OscConfig+0x8e>
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800
 8000798:	42470000 	.word	0x42470000
 800079c:	42470e80 	.word	0x42470e80
 80007a0:	40007000 	.word	0x40007000
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80007a4:	4d2e      	ldr	r5, [pc, #184]	; (8000860 <HAL_RCC_OscConfig+0x314>)
 80007a6:	68ab      	ldr	r3, [r5, #8]
 80007a8:	f003 030c 	and.w	r3, r3, #12
 80007ac:	2b08      	cmp	r3, #8
 80007ae:	f43f aeec 	beq.w	800058a <HAL_RCC_OscConfig+0x3e>
 80007b2:	4e2c      	ldr	r6, [pc, #176]	; (8000864 <HAL_RCC_OscConfig+0x318>)
 80007b4:	2300      	movs	r3, #0
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007b6:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80007b8:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007ba:	d141      	bne.n	8000840 <HAL_RCC_OscConfig+0x2f4>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80007bc:	f7ff fd6c 	bl	8000298 <HAL_GetTick>
 80007c0:	4680      	mov	r8, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80007c2:	682b      	ldr	r3, [r5, #0]
 80007c4:	4f26      	ldr	r7, [pc, #152]	; (8000860 <HAL_RCC_OscConfig+0x314>)
 80007c6:	0199      	lsls	r1, r3, #6
 80007c8:	d42d      	bmi.n	8000826 <HAL_RCC_OscConfig+0x2da>
 80007ca:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80007ce:	fa92 f2a2 	rbit	r2, r2
 80007d2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80007d6:	fab2 fe82 	clz	lr, r2
 80007da:	fa93 f3a3 	rbit	r3, r3
 80007de:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 80007e2:	fab3 f583 	clz	r5, r3
 80007e6:	fa92 f2a2 	rbit	r2, r2
 80007ea:	69e0      	ldr	r0, [r4, #28]
 80007ec:	6a23      	ldr	r3, [r4, #32]
 80007ee:	fab2 f182 	clz	r1, r2
 80007f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80007f4:	4303      	orrs	r3, r0
 80007f6:	fa02 f20e 	lsl.w	r2, r2, lr
 80007fa:	ea43 0002 	orr.w	r0, r3, r2
 80007fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000800:	085a      	lsrs	r2, r3, #1
 8000802:	3a01      	subs	r2, #1
 8000804:	fa02 f305 	lsl.w	r3, r2, r5
 8000808:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800080a:	4303      	orrs	r3, r0
 800080c:	408a      	lsls	r2, r1
 800080e:	4313      	orrs	r3, r2
 8000810:	607b      	str	r3, [r7, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000812:	2301      	movs	r3, #1
 8000814:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000816:	f7ff fd3f 	bl	8000298 <HAL_GetTick>
 800081a:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	019a      	lsls	r2, r3, #6
 8000820:	d508      	bpl.n	8000834 <HAL_RCC_OscConfig+0x2e8>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000822:	2000      	movs	r0, #0
 8000824:	e018      	b.n	8000858 <HAL_RCC_OscConfig+0x30c>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000826:	f7ff fd37 	bl	8000298 <HAL_GetTick>
 800082a:	ebc8 0000 	rsb	r0, r8, r0
 800082e:	2802      	cmp	r0, #2
 8000830:	d9c7      	bls.n	80007c2 <HAL_RCC_OscConfig+0x276>
 8000832:	e6d2      	b.n	80005da <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000834:	f7ff fd30 	bl	8000298 <HAL_GetTick>
 8000838:	1b00      	subs	r0, r0, r4
 800083a:	2802      	cmp	r0, #2
 800083c:	d9ee      	bls.n	800081c <HAL_RCC_OscConfig+0x2d0>
 800083e:	e6cc      	b.n	80005da <HAL_RCC_OscConfig+0x8e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000840:	f7ff fd2a 	bl	8000298 <HAL_GetTick>
 8000844:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000846:	682b      	ldr	r3, [r5, #0]
 8000848:	019b      	lsls	r3, r3, #6
 800084a:	d5ea      	bpl.n	8000822 <HAL_RCC_OscConfig+0x2d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800084c:	f7ff fd24 	bl	8000298 <HAL_GetTick>
 8000850:	1b00      	subs	r0, r0, r4
 8000852:	2802      	cmp	r0, #2
 8000854:	d9f7      	bls.n	8000846 <HAL_RCC_OscConfig+0x2fa>
 8000856:	e6c0      	b.n	80005da <HAL_RCC_OscConfig+0x8e>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000858:	b002      	add	sp, #8
 800085a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800
 8000864:	42470060 	.word	0x42470060

08000868 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000868:	491b      	ldr	r1, [pc, #108]	; (80008d8 <HAL_RCC_GetSysClockFreq+0x70>)
 800086a:	688b      	ldr	r3, [r1, #8]
 800086c:	f003 030c 	and.w	r3, r3, #12
 8000870:	2b04      	cmp	r3, #4
 8000872:	d02c      	beq.n	80008ce <HAL_RCC_GetSysClockFreq+0x66>
 8000874:	2b08      	cmp	r3, #8
 8000876:	d12c      	bne.n	80008d2 <HAL_RCC_GetSysClockFreq+0x6a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000878:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800087a:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800087c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000880:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000884:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000888:	684b      	ldr	r3, [r1, #4]
 800088a:	fa92 f2a2 	rbit	r2, r2
 800088e:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8000892:	fab2 f282 	clz	r2, r2
 8000896:	ea01 0103 	and.w	r1, r1, r3
 800089a:	fa21 f102 	lsr.w	r1, r1, r2
 800089e:	bf14      	ite	ne
 80008a0:	4a0e      	ldrne	r2, [pc, #56]	; (80008dc <HAL_RCC_GetSysClockFreq+0x74>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80008a2:	4a0f      	ldreq	r2, [pc, #60]	; (80008e0 <HAL_RCC_GetSysClockFreq+0x78>)
 80008a4:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80008a8:	4a0b      	ldr	r2, [pc, #44]	; (80008d8 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80008aa:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80008ae:	6852      	ldr	r2, [r2, #4]
 80008b0:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80008b4:	fa90 f0a0 	rbit	r0, r0
      
      sysclockfreq = pllvco/pllp;
 80008b8:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80008bc:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 80008c0:	fa22 f000 	lsr.w	r0, r2, r0
 80008c4:	3001      	adds	r0, #1
 80008c6:	0040      	lsls	r0, r0, #1
 80008c8:	fbb3 f0f0 	udiv	r0, r3, r0
 80008cc:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80008ce:	4803      	ldr	r0, [pc, #12]	; (80008dc <HAL_RCC_GetSysClockFreq+0x74>)
 80008d0:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80008d2:	4803      	ldr	r0, [pc, #12]	; (80008e0 <HAL_RCC_GetSysClockFreq+0x78>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800
 80008dc:	007a1200 	.word	0x007a1200
 80008e0:	00f42400 	.word	0x00f42400

080008e4 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008e4:	4b55      	ldr	r3, [pc, #340]	; (8000a3c <HAL_RCC_ClockConfig+0x158>)
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	f002 020f 	and.w	r2, r2, #15
 80008ec:	428a      	cmp	r2, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80008ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008f2:	4605      	mov	r5, r0
 80008f4:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008f6:	d30a      	bcc.n	800090e <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80008f8:	6829      	ldr	r1, [r5, #0]
 80008fa:	0788      	lsls	r0, r1, #30
 80008fc:	d511      	bpl.n	8000922 <HAL_RCC_ClockConfig+0x3e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80008fe:	4850      	ldr	r0, [pc, #320]	; (8000a40 <HAL_RCC_ClockConfig+0x15c>)
 8000900:	6883      	ldr	r3, [r0, #8]
 8000902:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000906:	68ab      	ldr	r3, [r5, #8]
 8000908:	4313      	orrs	r3, r2
 800090a:	6083      	str	r3, [r0, #8]
 800090c:	e009      	b.n	8000922 <HAL_RCC_ClockConfig+0x3e>
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800090e:	b2ca      	uxtb	r2, r1
 8000910:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f003 030f 	and.w	r3, r3, #15
 8000918:	4299      	cmp	r1, r3
 800091a:	d0ed      	beq.n	80008f8 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 800091c:	2001      	movs	r0, #1
 800091e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000922:	07c9      	lsls	r1, r1, #31
 8000924:	d406      	bmi.n	8000934 <HAL_RCC_ClockConfig+0x50>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000926:	4b45      	ldr	r3, [pc, #276]	; (8000a3c <HAL_RCC_ClockConfig+0x158>)
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	f002 020f 	and.w	r2, r2, #15
 800092e:	4296      	cmp	r6, r2
 8000930:	d351      	bcc.n	80009d6 <HAL_RCC_ClockConfig+0xf2>
 8000932:	e057      	b.n	80009e4 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000934:	686b      	ldr	r3, [r5, #4]
 8000936:	4a42      	ldr	r2, [pc, #264]	; (8000a40 <HAL_RCC_ClockConfig+0x15c>)
 8000938:	2b01      	cmp	r3, #1
 800093a:	d103      	bne.n	8000944 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800093c:	6812      	ldr	r2, [r2, #0]
 800093e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000942:	e008      	b.n	8000956 <HAL_RCC_ClockConfig+0x72>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000944:	1e99      	subs	r1, r3, #2
 8000946:	2901      	cmp	r1, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000948:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 800094a:	d802      	bhi.n	8000952 <HAL_RCC_ClockConfig+0x6e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800094c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000950:	e001      	b.n	8000956 <HAL_RCC_ClockConfig+0x72>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000952:	f012 0f02 	tst.w	r2, #2
 8000956:	d0e1      	beq.n	800091c <HAL_RCC_ClockConfig+0x38>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000958:	4c39      	ldr	r4, [pc, #228]	; (8000a40 <HAL_RCC_ClockConfig+0x15c>)
 800095a:	68a2      	ldr	r2, [r4, #8]
 800095c:	f022 0203 	bic.w	r2, r2, #3
 8000960:	4313      	orrs	r3, r2
 8000962:	60a3      	str	r3, [r4, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000964:	f7ff fc98 	bl	8000298 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000968:	686b      	ldr	r3, [r5, #4]
 800096a:	2b01      	cmp	r3, #1
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800096c:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800096e:	f241 3888 	movw	r8, #5000	; 0x1388
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000972:	d10c      	bne.n	800098e <HAL_RCC_ClockConfig+0xaa>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000974:	68a3      	ldr	r3, [r4, #8]
 8000976:	f003 030c 	and.w	r3, r3, #12
 800097a:	2b04      	cmp	r3, #4
 800097c:	d0d3      	beq.n	8000926 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800097e:	f7ff fc8b 	bl	8000298 <HAL_GetTick>
 8000982:	1bc0      	subs	r0, r0, r7
 8000984:	4540      	cmp	r0, r8
 8000986:	d9f5      	bls.n	8000974 <HAL_RCC_ClockConfig+0x90>
        {
          return HAL_TIMEOUT;
 8000988:	2003      	movs	r0, #3
 800098a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800098e:	2b02      	cmp	r3, #2
 8000990:	d10a      	bne.n	80009a8 <HAL_RCC_ClockConfig+0xc4>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000992:	68a3      	ldr	r3, [r4, #8]
 8000994:	f003 030c 	and.w	r3, r3, #12
 8000998:	2b08      	cmp	r3, #8
 800099a:	d0c4      	beq.n	8000926 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800099c:	f7ff fc7c 	bl	8000298 <HAL_GetTick>
 80009a0:	1bc0      	subs	r0, r0, r7
 80009a2:	4540      	cmp	r0, r8
 80009a4:	d9f5      	bls.n	8000992 <HAL_RCC_ClockConfig+0xae>
 80009a6:	e7ef      	b.n	8000988 <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 80009a8:	2b03      	cmp	r3, #3
 80009aa:	d10f      	bne.n	80009cc <HAL_RCC_ClockConfig+0xe8>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80009ac:	68a3      	ldr	r3, [r4, #8]
 80009ae:	f003 030c 	and.w	r3, r3, #12
 80009b2:	2b0c      	cmp	r3, #12
 80009b4:	d0b7      	beq.n	8000926 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009b6:	f7ff fc6f 	bl	8000298 <HAL_GetTick>
 80009ba:	1bc0      	subs	r0, r0, r7
 80009bc:	4540      	cmp	r0, r8
 80009be:	d9f5      	bls.n	80009ac <HAL_RCC_ClockConfig+0xc8>
 80009c0:	e7e2      	b.n	8000988 <HAL_RCC_ClockConfig+0xa4>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009c2:	f7ff fc69 	bl	8000298 <HAL_GetTick>
 80009c6:	1bc0      	subs	r0, r0, r7
 80009c8:	4540      	cmp	r0, r8
 80009ca:	d8dd      	bhi.n	8000988 <HAL_RCC_ClockConfig+0xa4>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80009cc:	68a3      	ldr	r3, [r4, #8]
 80009ce:	f013 0f0c 	tst.w	r3, #12
 80009d2:	d1f6      	bne.n	80009c2 <HAL_RCC_ClockConfig+0xde>
 80009d4:	e7a7      	b.n	8000926 <HAL_RCC_ClockConfig+0x42>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009d6:	b2f2      	uxtb	r2, r6
 80009d8:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f003 030f 	and.w	r3, r3, #15
 80009e0:	429e      	cmp	r6, r3
 80009e2:	d19b      	bne.n	800091c <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80009e4:	6829      	ldr	r1, [r5, #0]
 80009e6:	074a      	lsls	r2, r1, #29
 80009e8:	d506      	bpl.n	80009f8 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80009ea:	4815      	ldr	r0, [pc, #84]	; (8000a40 <HAL_RCC_ClockConfig+0x15c>)
 80009ec:	6883      	ldr	r3, [r0, #8]
 80009ee:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80009f2:	68eb      	ldr	r3, [r5, #12]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80009f8:	070b      	lsls	r3, r1, #28
 80009fa:	d507      	bpl.n	8000a0c <HAL_RCC_ClockConfig+0x128>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80009fc:	4a10      	ldr	r2, [pc, #64]	; (8000a40 <HAL_RCC_ClockConfig+0x15c>)
 80009fe:	6929      	ldr	r1, [r5, #16]
 8000a00:	6893      	ldr	r3, [r2, #8]
 8000a02:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000a06:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000a0a:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000a0c:	f7ff ff2c 	bl	8000868 <HAL_RCC_GetSysClockFreq>
 8000a10:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <HAL_RCC_ClockConfig+0x15c>)
 8000a12:	22f0      	movs	r2, #240	; 0xf0
 8000a14:	689b      	ldr	r3, [r3, #8]
 8000a16:	fa92 f2a2 	rbit	r2, r2
 8000a1a:	fab2 f282 	clz	r2, r2
 8000a1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a22:	40d3      	lsrs	r3, r2
 8000a24:	4a07      	ldr	r2, [pc, #28]	; (8000a44 <HAL_RCC_ClockConfig+0x160>)
 8000a26:	5cd3      	ldrb	r3, [r2, r3]
 8000a28:	40d8      	lsrs	r0, r3
 8000a2a:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <HAL_RCC_ClockConfig+0x164>)
 8000a2c:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f7ff fbfc 	bl	800022c <HAL_InitTick>
  
  return HAL_OK;
 8000a34:	2000      	movs	r0, #0
}
 8000a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023c00 	.word	0x40023c00
 8000a40:	40023800 	.word	0x40023800
 8000a44:	0800236e 	.word	0x0800236e
 8000a48:	20000000 	.word	0x20000000

08000a4c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000a4c:	4b01      	ldr	r3, [pc, #4]	; (8000a54 <HAL_RCC_GetHCLKFreq+0x8>)
 8000a4e:	6818      	ldr	r0, [r3, #0]
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	20000000 	.word	0x20000000

08000a58 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8000a5a:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8000a5e:	689b      	ldr	r3, [r3, #8]
 8000a60:	fa92 f2a2 	rbit	r2, r2
 8000a64:	fab2 f282 	clz	r2, r2
 8000a68:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000a6c:	40d3      	lsrs	r3, r2
 8000a6e:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000a70:	5cd3      	ldrb	r3, [r2, r3]
 8000a72:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000a74:	6810      	ldr	r0, [r2, #0]
}
 8000a76:	40d8      	lsrs	r0, r3
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	0800236e 	.word	0x0800236e
 8000a84:	20000000 	.word	0x20000000

08000a88 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8000a8a:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	fa92 f2a2 	rbit	r2, r2
 8000a94:	fab2 f282 	clz	r2, r2
 8000a98:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000a9c:	40d3      	lsrs	r3, r2
 8000a9e:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000aa0:	5cd3      	ldrb	r3, [r2, r3]
 8000aa2:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000aa4:	6810      	ldr	r0, [r2, #0]
} 
 8000aa6:	40d8      	lsrs	r0, r3
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	0800236e 	.word	0x0800236e
 8000ab4:	20000000 	.word	0x20000000

08000ab8 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8000abc:	6807      	ldr	r7, [r0, #0]
 8000abe:	693b      	ldr	r3, [r7, #16]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000ac0:	4604      	mov	r4, r0

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000ac2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000ac6:	68c3      	ldr	r3, [r0, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000ac8:	68a1      	ldr	r1, [r4, #8]
 8000aca:	69c0      	ldr	r0, [r0, #28]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000acc:	4313      	orrs	r3, r2
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000ace:	6922      	ldr	r2, [r4, #16]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8000ad0:	613b      	str	r3, [r7, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000ad4:	4311      	orrs	r1, r2
 8000ad6:	6962      	ldr	r2, [r4, #20]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8000ad8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000adc:	430a      	orrs	r2, r1
 8000ade:	4302      	orrs	r2, r0

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8000ae0:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000ae4:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8000ae6:	60fb      	str	r3, [r7, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8000ae8:	697b      	ldr	r3, [r7, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8000aea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8000aee:	69a3      	ldr	r3, [r4, #24]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000af0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8000af4:	ea43 0302 	orr.w	r3, r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	4b7c      	ldr	r3, [pc, #496]	; (8000cec <UART_SetConfig+0x234>)
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000afc:	d17c      	bne.n	8000bf8 <UART_SetConfig+0x140>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8000afe:	429f      	cmp	r7, r3
 8000b00:	d003      	beq.n	8000b0a <UART_SetConfig+0x52>
 8000b02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000b06:	429f      	cmp	r7, r3
 8000b08:	d131      	bne.n	8000b6e <UART_SetConfig+0xb6>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000b0a:	f7ff ffbd 	bl	8000a88 <HAL_RCC_GetPCLK2Freq>
 8000b0e:	6863      	ldr	r3, [r4, #4]
 8000b10:	2519      	movs	r5, #25
 8000b12:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8000b16:	4368      	muls	r0, r5
 8000b18:	fbb0 f8f8 	udiv	r8, r0, r8
 8000b1c:	f7ff ffb4 	bl	8000a88 <HAL_RCC_GetPCLK2Freq>
 8000b20:	6866      	ldr	r6, [r4, #4]
 8000b22:	4368      	muls	r0, r5
 8000b24:	0076      	lsls	r6, r6, #1
 8000b26:	fbb0 f6f6 	udiv	r6, r0, r6
 8000b2a:	f7ff ffad 	bl	8000a88 <HAL_RCC_GetPCLK2Freq>
 8000b2e:	6863      	ldr	r3, [r4, #4]
 8000b30:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	4368      	muls	r0, r5
 8000b38:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b3c:	fbb0 f0f9 	udiv	r0, r0, r9
 8000b40:	fb09 6610 	mls	r6, r9, r0, r6
 8000b44:	f7ff ffa0 	bl	8000a88 <HAL_RCC_GetPCLK2Freq>
 8000b48:	fbb8 f8f9 	udiv	r8, r8, r9
 8000b4c:	6861      	ldr	r1, [r4, #4]
 8000b4e:	00f6      	lsls	r6, r6, #3
 8000b50:	3632      	adds	r6, #50	; 0x32
 8000b52:	fbb6 f6f9 	udiv	r6, r6, r9
 8000b56:	0076      	lsls	r6, r6, #1
 8000b58:	4368      	muls	r0, r5
 8000b5a:	0049      	lsls	r1, r1, #1
 8000b5c:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8000b60:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 8000b64:	fbb0 faf1 	udiv	sl, r0, r1
 8000b68:	f7ff ff8e 	bl	8000a88 <HAL_RCC_GetPCLK2Freq>
 8000b6c:	e030      	b.n	8000bd0 <UART_SetConfig+0x118>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000b6e:	f7ff ff73 	bl	8000a58 <HAL_RCC_GetPCLK1Freq>
 8000b72:	6863      	ldr	r3, [r4, #4]
 8000b74:	2519      	movs	r5, #25
 8000b76:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8000b7a:	4368      	muls	r0, r5
 8000b7c:	fbb0 f8f8 	udiv	r8, r0, r8
 8000b80:	f7ff ff6a 	bl	8000a58 <HAL_RCC_GetPCLK1Freq>
 8000b84:	6866      	ldr	r6, [r4, #4]
 8000b86:	4368      	muls	r0, r5
 8000b88:	0076      	lsls	r6, r6, #1
 8000b8a:	fbb0 f6f6 	udiv	r6, r0, r6
 8000b8e:	f7ff ff63 	bl	8000a58 <HAL_RCC_GetPCLK1Freq>
 8000b92:	6863      	ldr	r3, [r4, #4]
 8000b94:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	4368      	muls	r0, r5
 8000b9c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ba0:	fbb0 f0f9 	udiv	r0, r0, r9
 8000ba4:	fb09 6610 	mls	r6, r9, r0, r6
 8000ba8:	f7ff ff56 	bl	8000a58 <HAL_RCC_GetPCLK1Freq>
 8000bac:	fbb8 f8f9 	udiv	r8, r8, r9
 8000bb0:	00f6      	lsls	r6, r6, #3
 8000bb2:	6861      	ldr	r1, [r4, #4]
 8000bb4:	3632      	adds	r6, #50	; 0x32
 8000bb6:	fbb6 f6f9 	udiv	r6, r6, r9
 8000bba:	0076      	lsls	r6, r6, #1
 8000bbc:	4368      	muls	r0, r5
 8000bbe:	0049      	lsls	r1, r1, #1
 8000bc0:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8000bc4:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 8000bc8:	fbb0 faf1 	udiv	sl, r0, r1
 8000bcc:	f7ff ff44 	bl	8000a58 <HAL_RCC_GetPCLK1Freq>
 8000bd0:	4345      	muls	r5, r0
 8000bd2:	6860      	ldr	r0, [r4, #4]
 8000bd4:	0040      	lsls	r0, r0, #1
 8000bd6:	fbb5 f0f0 	udiv	r0, r5, r0
 8000bda:	fbb0 f0f9 	udiv	r0, r0, r9
 8000bde:	fb09 a210 	mls	r2, r9, r0, sl
 8000be2:	00d2      	lsls	r2, r2, #3
 8000be4:	3232      	adds	r2, #50	; 0x32
 8000be6:	fbb2 f3f9 	udiv	r3, r2, r9
 8000bea:	f003 0307 	and.w	r3, r3, #7
 8000bee:	4443      	add	r3, r8
 8000bf0:	441e      	add	r6, r3
 8000bf2:	60be      	str	r6, [r7, #8]
 8000bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8000bf8:	429f      	cmp	r7, r3
 8000bfa:	d002      	beq.n	8000c02 <UART_SetConfig+0x14a>
 8000bfc:	4b3c      	ldr	r3, [pc, #240]	; (8000cf0 <UART_SetConfig+0x238>)
 8000bfe:	429f      	cmp	r7, r3
 8000c00:	d130      	bne.n	8000c64 <UART_SetConfig+0x1ac>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000c02:	f7ff ff41 	bl	8000a88 <HAL_RCC_GetPCLK2Freq>
 8000c06:	6863      	ldr	r3, [r4, #4]
 8000c08:	2519      	movs	r5, #25
 8000c0a:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8000c0e:	4368      	muls	r0, r5
 8000c10:	fbb0 f8f8 	udiv	r8, r0, r8
 8000c14:	f7ff ff38 	bl	8000a88 <HAL_RCC_GetPCLK2Freq>
 8000c18:	6866      	ldr	r6, [r4, #4]
 8000c1a:	4368      	muls	r0, r5
 8000c1c:	00b6      	lsls	r6, r6, #2
 8000c1e:	fbb0 f6f6 	udiv	r6, r0, r6
 8000c22:	f7ff ff31 	bl	8000a88 <HAL_RCC_GetPCLK2Freq>
 8000c26:	6863      	ldr	r3, [r4, #4]
 8000c28:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	4368      	muls	r0, r5
 8000c30:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c34:	fbb0 f0f9 	udiv	r0, r0, r9
 8000c38:	fb09 6610 	mls	r6, r9, r0, r6
 8000c3c:	f7ff ff24 	bl	8000a88 <HAL_RCC_GetPCLK2Freq>
 8000c40:	fbb8 f8f9 	udiv	r8, r8, r9
 8000c44:	6861      	ldr	r1, [r4, #4]
 8000c46:	0136      	lsls	r6, r6, #4
 8000c48:	4368      	muls	r0, r5
 8000c4a:	0089      	lsls	r1, r1, #2
 8000c4c:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8000c50:	3632      	adds	r6, #50	; 0x32
 8000c52:	fbb0 faf1 	udiv	sl, r0, r1
 8000c56:	fbb6 f6f9 	udiv	r6, r6, r9
 8000c5a:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 8000c5e:	f7ff ff13 	bl	8000a88 <HAL_RCC_GetPCLK2Freq>
 8000c62:	e02f      	b.n	8000cc4 <UART_SetConfig+0x20c>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000c64:	f7ff fef8 	bl	8000a58 <HAL_RCC_GetPCLK1Freq>
 8000c68:	6863      	ldr	r3, [r4, #4]
 8000c6a:	2519      	movs	r5, #25
 8000c6c:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8000c70:	4368      	muls	r0, r5
 8000c72:	fbb0 f8f8 	udiv	r8, r0, r8
 8000c76:	f7ff feef 	bl	8000a58 <HAL_RCC_GetPCLK1Freq>
 8000c7a:	6866      	ldr	r6, [r4, #4]
 8000c7c:	4368      	muls	r0, r5
 8000c7e:	00b6      	lsls	r6, r6, #2
 8000c80:	fbb0 f6f6 	udiv	r6, r0, r6
 8000c84:	f7ff fee8 	bl	8000a58 <HAL_RCC_GetPCLK1Freq>
 8000c88:	6863      	ldr	r3, [r4, #4]
 8000c8a:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	4368      	muls	r0, r5
 8000c92:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c96:	fbb0 f0f9 	udiv	r0, r0, r9
 8000c9a:	fb09 6610 	mls	r6, r9, r0, r6
 8000c9e:	f7ff fedb 	bl	8000a58 <HAL_RCC_GetPCLK1Freq>
 8000ca2:	fbb8 f8f9 	udiv	r8, r8, r9
 8000ca6:	6861      	ldr	r1, [r4, #4]
 8000ca8:	0136      	lsls	r6, r6, #4
 8000caa:	3632      	adds	r6, #50	; 0x32
 8000cac:	4368      	muls	r0, r5
 8000cae:	fbb6 f6f9 	udiv	r6, r6, r9
 8000cb2:	0089      	lsls	r1, r1, #2
 8000cb4:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8000cb8:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 8000cbc:	fbb0 faf1 	udiv	sl, r0, r1
 8000cc0:	f7ff feca 	bl	8000a58 <HAL_RCC_GetPCLK1Freq>
 8000cc4:	4345      	muls	r5, r0
 8000cc6:	6860      	ldr	r0, [r4, #4]
 8000cc8:	0080      	lsls	r0, r0, #2
 8000cca:	fbb5 f0f0 	udiv	r0, r5, r0
 8000cce:	fbb0 f0f9 	udiv	r0, r0, r9
 8000cd2:	fb09 a210 	mls	r2, r9, r0, sl
 8000cd6:	0112      	lsls	r2, r2, #4
 8000cd8:	3232      	adds	r2, #50	; 0x32
 8000cda:	fbb2 f3f9 	udiv	r3, r2, r9
 8000cde:	f003 030f 	and.w	r3, r3, #15
 8000ce2:	4433      	add	r3, r6
 8000ce4:	4443      	add	r3, r8
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cec:	40011000 	.word	0x40011000
 8000cf0:	40011400 	.word	0x40011400

08000cf4 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000cf4:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8000cf6:	4604      	mov	r4, r0
 8000cf8:	b340      	cbz	r0, 8000d4c <HAL_UART_Init+0x58>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8000cfa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000cfe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d02:	b91b      	cbnz	r3, 8000d0c <HAL_UART_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000d04:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8000d08:	f000 ff00 	bl	8001b0c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000d0c:	6822      	ldr	r2, [r4, #0]
    huart->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000d0e:	2324      	movs	r3, #36	; 0x24
 8000d10:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000d14:	68d3      	ldr	r3, [r2, #12]
 8000d16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000d1a:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000d1c:	4620      	mov	r0, r4
 8000d1e:	f7ff fecb 	bl	8000ab8 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000d22:	6823      	ldr	r3, [r4, #0]
 8000d24:	691a      	ldr	r2, [r3, #16]
 8000d26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000d2a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000d2c:	695a      	ldr	r2, [r3, #20]
 8000d2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000d32:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000d34:	68da      	ldr	r2, [r3, #12]
 8000d36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000d3a:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d3c:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8000d3e:	2320      	movs	r3, #32
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d40:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8000d42:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8000d46:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  
  return HAL_OK;
 8000d4a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8000d4c:	2001      	movs	r0, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 8000d4e:	bd10      	pop	{r4, pc}

08000d50 <change_direction.part.0>:

void change_direction(Direction *current_direction, uint8_t direction_left)
{
    if (direction_left)
    {
        switch (*current_direction)
 8000d50:	7803      	ldrb	r3, [r0, #0]
 8000d52:	2b03      	cmp	r3, #3
 8000d54:	d80b      	bhi.n	8000d6e <change_direction.part.0+0x1e>
 8000d56:	e8df f003 	tbb	[pc, r3]
 8000d5a:	0402      	.short	0x0402
 8000d5c:	0806      	.short	0x0806
        {
        case UP:
            *current_direction = LEFT;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e004      	b.n	8000d6c <change_direction.part.0+0x1c>
            break;
        case RIGHT:
            *current_direction = UP;
 8000d62:	2300      	movs	r3, #0
 8000d64:	e002      	b.n	8000d6c <change_direction.part.0+0x1c>
            break;
        case DOWN:
            *current_direction = RIGHT;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e000      	b.n	8000d6c <change_direction.part.0+0x1c>
            break;
        case LEFT:
            *current_direction = DOWN;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	7003      	strb	r3, [r0, #0]
 8000d6e:	4770      	bx	lr

08000d70 <SystemClock_Config>:
}

/** System Clock Configuration
 */
void SystemClock_Config(void)
{
 8000d70:	b530      	push	{r4, r5, lr}
 8000d72:	b095      	sub	sp, #84	; 0x54
    RCC_OscInitTypeDef RCC_OscInitStruct;
    RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000d74:	2300      	movs	r3, #0
 8000d76:	4a26      	ldr	r2, [pc, #152]	; (8000e10 <SystemClock_Config+0xa0>)
 8000d78:	9301      	str	r3, [sp, #4]
 8000d7a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000d7c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000d80:	6411      	str	r1, [r2, #64]	; 0x40
 8000d82:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000d84:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000d88:	9201      	str	r2, [sp, #4]
 8000d8a:	9a01      	ldr	r2, [sp, #4]

    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d8c:	4a21      	ldr	r2, [pc, #132]	; (8000e14 <SystemClock_Config+0xa4>)
 8000d8e:	9302      	str	r3, [sp, #8]
 8000d90:	6811      	ldr	r1, [r2, #0]
 8000d92:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8000d96:	6011      	str	r1, [r2, #0]
 8000d98:	6812      	ldr	r2, [r2, #0]
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.HSICalibrationValue = 16;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d9a:	930f      	str	r3, [sp, #60]	; 0x3c

    /**Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();

    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d9c:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8000da0:	9202      	str	r2, [sp, #8]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.HSICalibrationValue = 16;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
    RCC_OscInitStruct.PLL.PLLM = 8;
 8000da2:	2308      	movs	r3, #8

    /**Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();

    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da4:	9a02      	ldr	r2, [sp, #8]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.HSICalibrationValue = 16;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
    RCC_OscInitStruct.PLL.PLLM = 8;
 8000da6:	9310      	str	r3, [sp, #64]	; 0x40
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

    /**Initializes the CPU, AHB and APB busses clocks
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000da8:	2201      	movs	r2, #1

    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

    /**Initializes the CPU, AHB and APB busses clocks
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000daa:	2402      	movs	r4, #2
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dac:	920b      	str	r2, [sp, #44]	; 0x2c
    RCC_OscInitStruct.HSICalibrationValue = 16;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
    RCC_OscInitStruct.PLL.PLLM = 8;
    RCC_OscInitStruct.PLL.PLLN = 100;
 8000dae:	2364      	movs	r3, #100	; 0x64

    /**Initializes the CPU, AHB and APB busses clocks
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.HSICalibrationValue = 16;
 8000db0:	2210      	movs	r2, #16
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
    RCC_OscInitStruct.PLL.PLLM = 8;
    RCC_OscInitStruct.PLL.PLLN = 100;
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8000db2:	2504      	movs	r5, #4
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db4:	a808      	add	r0, sp, #32

    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

    /**Initializes the CPU, AHB and APB busses clocks
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000db6:	9408      	str	r4, [sp, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.HSICalibrationValue = 16;
 8000db8:	920c      	str	r2, [sp, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dba:	940e      	str	r4, [sp, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
    RCC_OscInitStruct.PLL.PLLM = 8;
    RCC_OscInitStruct.PLL.PLLN = 100;
 8000dbc:	9311      	str	r3, [sp, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dbe:	9412      	str	r4, [sp, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8000dc0:	9513      	str	r5, [sp, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc2:	f7ff fbc3 	bl	800054c <HAL_RCC_OscConfig>
 8000dc6:	b100      	cbz	r0, 8000dca <SystemClock_Config+0x5a>
 8000dc8:	e7fe      	b.n	8000dc8 <SystemClock_Config+0x58>
        Error_Handler();
    }

    /**Initializes the CPU, AHB and APB busses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dca:	230f      	movs	r3, #15
 8000dcc:	9303      	str	r3, [sp, #12]
            |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dce:	9005      	str	r0, [sp, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dd4:	9007      	str	r0, [sp, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000dd6:	2103      	movs	r1, #3
 8000dd8:	a803      	add	r0, sp, #12

    /**Initializes the CPU, AHB and APB busses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
            |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dda:	9404      	str	r4, [sp, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ddc:	9306      	str	r3, [sp, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000dde:	f7ff fd81 	bl	80008e4 <HAL_RCC_ClockConfig>
 8000de2:	4604      	mov	r4, r0
 8000de4:	b100      	cbz	r0, 8000de8 <SystemClock_Config+0x78>
 8000de6:	e7fe      	b.n	8000de6 <SystemClock_Config+0x76>
        Error_Handler();
    }

    /**Configure the Systick interrupt time
     */
    HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000de8:	f7ff fe30 	bl	8000a4c <HAL_RCC_GetHCLKFreq>
 8000dec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000df4:	f7ff faaa 	bl	800034c <HAL_SYSTICK_Config>

    /**Configure the Systick
     */
    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000df8:	4628      	mov	r0, r5
 8000dfa:	f7ff fabd 	bl	8000378 <HAL_SYSTICK_CLKSourceConfig>

    /* SysTick_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000dfe:	4622      	mov	r2, r4
 8000e00:	4621      	mov	r1, r4
 8000e02:	f04f 30ff 	mov.w	r0, #4294967295
 8000e06:	f7ff fa6d 	bl	80002e4 <HAL_NVIC_SetPriority>
}
 8000e0a:	b015      	add	sp, #84	; 0x54
 8000e0c:	bd30      	pop	{r4, r5, pc}
 8000e0e:	bf00      	nop
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40007000 	.word	0x40007000

08000e18 <cdelay>:
}

/* USER CODE BEGIN 4 */

void cdelay(void)
{
 8000e18:	b082      	sub	sp, #8
    volatile int delay;
    for (delay=8;delay;delay--);
 8000e1a:	2308      	movs	r3, #8
 8000e1c:	9301      	str	r3, [sp, #4]
 8000e1e:	9b01      	ldr	r3, [sp, #4]
 8000e20:	b113      	cbz	r3, 8000e28 <cdelay+0x10>
 8000e22:	9b01      	ldr	r3, [sp, #4]
 8000e24:	3b01      	subs	r3, #1
 8000e26:	e7f9      	b.n	8000e1c <cdelay+0x4>
}
 8000e28:	b002      	add	sp, #8
 8000e2a:	4770      	bx	lr

08000e2c <oled_sendbit>:
    CDELAY; //seems to work without delay, but using it to be sure that bus gets released.
    return ack;
}

GPIO_PinState oled_sendbit(GPIO_PinState val)
{
 8000e2c:	b570      	push	{r4, r5, r6, lr}
    SCL(LOW); //set clock to fall
 8000e2e:	4d10      	ldr	r5, [pc, #64]	; (8000e70 <oled_sendbit+0x44>)
    CDELAY; //wait for SCL to get LOW
    SDA(val); //clock is LOW, now ok to change SDA
 8000e30:	4c10      	ldr	r4, [pc, #64]	; (8000e74 <oled_sendbit+0x48>)
    CDELAY; //seems to work without delay, but using it to be sure that bus gets released.
    return ack;
}

GPIO_PinState oled_sendbit(GPIO_PinState val)
{
 8000e32:	4606      	mov	r6, r0
    SCL(LOW); //set clock to fall
 8000e34:	2200      	movs	r2, #0
 8000e36:	4628      	mov	r0, r5
 8000e38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e3c:	f7ff fb82 	bl	8000544 <HAL_GPIO_WritePin>
    CDELAY; //wait for SCL to get LOW
 8000e40:	f7ff ffea 	bl	8000e18 <cdelay>
    SDA(val); //clock is LOW, now ok to change SDA
 8000e44:	4632      	mov	r2, r6
 8000e46:	4620      	mov	r0, r4
 8000e48:	2180      	movs	r1, #128	; 0x80
 8000e4a:	f7ff fb7b 	bl	8000544 <HAL_GPIO_WritePin>
    CDELAY; //wait for SDA to reach a stable state
 8000e4e:	f7ff ffe3 	bl	8000e18 <cdelay>
    SCL(HIGH); //set clock to rise
 8000e52:	4628      	mov	r0, r5
 8000e54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f7ff fb73 	bl	8000544 <HAL_GPIO_WritePin>
    CDELAY; //wait for SCL to get HIGH, then data is sent to SSD1306
 8000e5e:	f7ff ffdb 	bl	8000e18 <cdelay>
    return rSDA; //used in case of reading ACK
 8000e62:	4620      	mov	r0, r4
 8000e64:	2180      	movs	r1, #128	; 0x80
}
 8000e66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    CDELAY; //wait for SCL to get LOW
    SDA(val); //clock is LOW, now ok to change SDA
    CDELAY; //wait for SDA to reach a stable state
    SCL(HIGH); //set clock to rise
    CDELAY; //wait for SCL to get HIGH, then data is sent to SSD1306
    return rSDA; //used in case of reading ACK
 8000e6a:	f7ff bb65 	b.w	8000538 <HAL_GPIO_ReadPin>
 8000e6e:	bf00      	nop
 8000e70:	40020000 	.word	0x40020000
 8000e74:	40020400 	.word	0x40020400

08000e78 <oled_sendbyte>:
    delay*=11.206;
    for (;delay;delay--);
}

GPIO_PinState oled_sendbyte(uint8_t data)
{
 8000e78:	b570      	push	{r4, r5, r6, lr}
 8000e7a:	4606      	mov	r6, r0
 8000e7c:	2408      	movs	r4, #8
    GPIO_PinState ack;

    for (uint8_t i = 0x80; i != 0; i>>=1)
 8000e7e:	2580      	movs	r5, #128	; 0x80
        oled_sendbit(!!(data & i));
 8000e80:	422e      	tst	r6, r5
 8000e82:	bf14      	ite	ne
 8000e84:	2001      	movne	r0, #1
 8000e86:	2000      	moveq	r0, #0
 8000e88:	f7ff ffd0 	bl	8000e2c <oled_sendbit>

GPIO_PinState oled_sendbyte(uint8_t data)
{
    GPIO_PinState ack;

    for (uint8_t i = 0x80; i != 0; i>>=1)
 8000e8c:	3c01      	subs	r4, #1
 8000e8e:	ea4f 0555 	mov.w	r5, r5, lsr #1
 8000e92:	d1f5      	bne.n	8000e80 <oled_sendbyte+0x8>
        oled_sendbit(!!(data & i));

    ack = oled_sendbit(HIGH); //check acknowledgement signal(should be LOW)
 8000e94:	2001      	movs	r0, #1
 8000e96:	f7ff ffc9 	bl	8000e2c <oled_sendbit>
    SCL(LOW); //Slave releases bus, so master can write again, could also put CDELAY after
 8000e9a:	4622      	mov	r2, r4
    GPIO_PinState ack;

    for (uint8_t i = 0x80; i != 0; i>>=1)
        oled_sendbit(!!(data & i));

    ack = oled_sendbit(HIGH); //check acknowledgement signal(should be LOW)
 8000e9c:	4605      	mov	r5, r0
    SCL(LOW); //Slave releases bus, so master can write again, could also put CDELAY after
 8000e9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ea2:	4803      	ldr	r0, [pc, #12]	; (8000eb0 <oled_sendbyte+0x38>)
 8000ea4:	f7ff fb4e 	bl	8000544 <HAL_GPIO_WritePin>
    CDELAY; //seems to work without delay, but using it to be sure that bus gets released.
 8000ea8:	f7ff ffb6 	bl	8000e18 <cdelay>
    return ack;
}
 8000eac:	4628      	mov	r0, r5
 8000eae:	bd70      	pop	{r4, r5, r6, pc}
 8000eb0:	40020000 	.word	0x40020000

08000eb4 <oled_init>:
    CDELAY; //wait for SCL to get HIGH, then data is sent to SSD1306
    return rSDA; //used in case of reading ACK
}

void oled_init(void)
{
 8000eb4:	b538      	push	{r3, r4, r5, lr}
    STOPBIT;
 8000eb6:	4c9e      	ldr	r4, [pc, #632]	; (8001130 <oled_init+0x27c>)
 8000eb8:	4d9e      	ldr	r5, [pc, #632]	; (8001134 <oled_init+0x280>)
 8000eba:	4620      	mov	r0, r4
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ec2:	f7ff fb3f 	bl	8000544 <HAL_GPIO_WritePin>
 8000ec6:	f7ff ffa7 	bl	8000e18 <cdelay>
 8000eca:	4628      	mov	r0, r5
 8000ecc:	2201      	movs	r2, #1
 8000ece:	2180      	movs	r1, #128	; 0x80
 8000ed0:	f7ff fb38 	bl	8000544 <HAL_GPIO_WritePin>
 8000ed4:	f7ff ffa0 	bl	8000e18 <cdelay>
 8000ed8:	f7ff ff9e 	bl	8000e18 <cdelay>
    STARTBIT;
 8000edc:	2200      	movs	r2, #0
 8000ede:	2180      	movs	r1, #128	; 0x80
 8000ee0:	4628      	mov	r0, r5
 8000ee2:	f7ff fb2f 	bl	8000544 <HAL_GPIO_WritePin>
 8000ee6:	f7ff ff97 	bl	8000e18 <cdelay>
    LD2(oled_sendbyte(ADDRESS+WRITE));
 8000eea:	2078      	movs	r0, #120	; 0x78
 8000eec:	f7ff ffc4 	bl	8000e78 <oled_sendbyte>
 8000ef0:	2120      	movs	r1, #32
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	f7ff fb25 	bl	8000544 <HAL_GPIO_WritePin>
    LD2(oled_sendbyte(COMMAND));
 8000efa:	2000      	movs	r0, #0
 8000efc:	f7ff ffbc 	bl	8000e78 <oled_sendbyte>
 8000f00:	2120      	movs	r1, #32
 8000f02:	4602      	mov	r2, r0
 8000f04:	4620      	mov	r0, r4
 8000f06:	f7ff fb1d 	bl	8000544 <HAL_GPIO_WritePin>
    LD2(oled_sendbyte(ONOFF(0)));
 8000f0a:	20ae      	movs	r0, #174	; 0xae
 8000f0c:	f7ff ffb4 	bl	8000e78 <oled_sendbyte>
 8000f10:	2120      	movs	r1, #32
 8000f12:	4602      	mov	r2, r0
 8000f14:	4620      	mov	r0, r4
 8000f16:	f7ff fb15 	bl	8000544 <HAL_GPIO_WritePin>
    LD2(oled_sendbyte(DIVIDEFREQ));  LD2(oled_sendbyte(0x80));
 8000f1a:	20d5      	movs	r0, #213	; 0xd5
 8000f1c:	f7ff ffac 	bl	8000e78 <oled_sendbyte>
 8000f20:	2120      	movs	r1, #32
 8000f22:	4602      	mov	r2, r0
 8000f24:	4620      	mov	r0, r4
 8000f26:	f7ff fb0d 	bl	8000544 <HAL_GPIO_WritePin>
 8000f2a:	2080      	movs	r0, #128	; 0x80
 8000f2c:	f7ff ffa4 	bl	8000e78 <oled_sendbyte>
 8000f30:	2120      	movs	r1, #32
 8000f32:	4602      	mov	r2, r0
 8000f34:	4620      	mov	r0, r4
 8000f36:	f7ff fb05 	bl	8000544 <HAL_GPIO_WritePin>
    LD2(oled_sendbyte(MULTIPLEX));   LD2(oled_sendbyte(63));
 8000f3a:	20a8      	movs	r0, #168	; 0xa8
 8000f3c:	f7ff ff9c 	bl	8000e78 <oled_sendbyte>
 8000f40:	2120      	movs	r1, #32
 8000f42:	4602      	mov	r2, r0
 8000f44:	4620      	mov	r0, r4
 8000f46:	f7ff fafd 	bl	8000544 <HAL_GPIO_WritePin>
 8000f4a:	203f      	movs	r0, #63	; 0x3f
 8000f4c:	f7ff ff94 	bl	8000e78 <oled_sendbyte>
 8000f50:	2120      	movs	r1, #32
 8000f52:	4602      	mov	r2, r0
 8000f54:	4620      	mov	r0, r4
 8000f56:	f7ff faf5 	bl	8000544 <HAL_GPIO_WritePin>
    LD2(oled_sendbyte(OFFSET));      LD2(oled_sendbyte(0));
 8000f5a:	20d3      	movs	r0, #211	; 0xd3
 8000f5c:	f7ff ff8c 	bl	8000e78 <oled_sendbyte>
 8000f60:	2120      	movs	r1, #32
 8000f62:	4602      	mov	r2, r0
 8000f64:	4620      	mov	r0, r4
 8000f66:	f7ff faed 	bl	8000544 <HAL_GPIO_WritePin>
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f7ff ff84 	bl	8000e78 <oled_sendbyte>
 8000f70:	2120      	movs	r1, #32
 8000f72:	4602      	mov	r2, r0
 8000f74:	4620      	mov	r0, r4
 8000f76:	f7ff fae5 	bl	8000544 <HAL_GPIO_WritePin>
    LD2(oled_sendbyte(STARTLINE(0)));
 8000f7a:	2040      	movs	r0, #64	; 0x40
 8000f7c:	f7ff ff7c 	bl	8000e78 <oled_sendbyte>
 8000f80:	2120      	movs	r1, #32
 8000f82:	4602      	mov	r2, r0
 8000f84:	4620      	mov	r0, r4
 8000f86:	f7ff fadd 	bl	8000544 <HAL_GPIO_WritePin>
    LD2(oled_sendbyte(CHARGEPUMP));  LD2(oled_sendbyte(0x14));
 8000f8a:	208d      	movs	r0, #141	; 0x8d
 8000f8c:	f7ff ff74 	bl	8000e78 <oled_sendbyte>
 8000f90:	2120      	movs	r1, #32
 8000f92:	4602      	mov	r2, r0
 8000f94:	4620      	mov	r0, r4
 8000f96:	f7ff fad5 	bl	8000544 <HAL_GPIO_WritePin>
 8000f9a:	2014      	movs	r0, #20
 8000f9c:	f7ff ff6c 	bl	8000e78 <oled_sendbyte>
 8000fa0:	2120      	movs	r1, #32
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	4620      	mov	r0, r4
 8000fa6:	f7ff facd 	bl	8000544 <HAL_GPIO_WritePin>
    LD2(oled_sendbyte(ADDRESSING));  LD2(oled_sendbyte(HORIZONTAL));
 8000faa:	2020      	movs	r0, #32
 8000fac:	f7ff ff64 	bl	8000e78 <oled_sendbyte>
 8000fb0:	2120      	movs	r1, #32
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	4620      	mov	r0, r4
 8000fb6:	f7ff fac5 	bl	8000544 <HAL_GPIO_WritePin>
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f7ff ff5c 	bl	8000e78 <oled_sendbyte>
 8000fc0:	2120      	movs	r1, #32
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	f7ff fabd 	bl	8000544 <HAL_GPIO_WritePin>
    LD2(oled_sendbyte(REMAP(1)));
 8000fca:	20a1      	movs	r0, #161	; 0xa1
 8000fcc:	f7ff ff54 	bl	8000e78 <oled_sendbyte>
 8000fd0:	2120      	movs	r1, #32
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	4620      	mov	r0, r4
 8000fd6:	f7ff fab5 	bl	8000544 <HAL_GPIO_WritePin>
    LD2(oled_sendbyte(OUTDIR(1)));
 8000fda:	20c8      	movs	r0, #200	; 0xc8
 8000fdc:	f7ff ff4c 	bl	8000e78 <oled_sendbyte>
 8000fe0:	2120      	movs	r1, #32
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	f7ff faad 	bl	8000544 <HAL_GPIO_WritePin>
    LD2(oled_sendbyte(COMPINS));     LD2(oled_sendbyte(0x12));
 8000fea:	20da      	movs	r0, #218	; 0xda
 8000fec:	f7ff ff44 	bl	8000e78 <oled_sendbyte>
 8000ff0:	2120      	movs	r1, #32
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	4620      	mov	r0, r4
 8000ff6:	f7ff faa5 	bl	8000544 <HAL_GPIO_WritePin>
 8000ffa:	2012      	movs	r0, #18
 8000ffc:	f7ff ff3c 	bl	8000e78 <oled_sendbyte>
 8001000:	2120      	movs	r1, #32
 8001002:	4602      	mov	r2, r0
 8001004:	4620      	mov	r0, r4
 8001006:	f7ff fa9d 	bl	8000544 <HAL_GPIO_WritePin>
    LD2(oled_sendbyte(CONTRAST));    LD2(oled_sendbyte(0xcf));
 800100a:	2081      	movs	r0, #129	; 0x81
 800100c:	f7ff ff34 	bl	8000e78 <oled_sendbyte>
 8001010:	2120      	movs	r1, #32
 8001012:	4602      	mov	r2, r0
 8001014:	4620      	mov	r0, r4
 8001016:	f7ff fa95 	bl	8000544 <HAL_GPIO_WritePin>
 800101a:	20cf      	movs	r0, #207	; 0xcf
 800101c:	f7ff ff2c 	bl	8000e78 <oled_sendbyte>
 8001020:	2120      	movs	r1, #32
 8001022:	4602      	mov	r2, r0
 8001024:	4620      	mov	r0, r4
 8001026:	f7ff fa8d 	bl	8000544 <HAL_GPIO_WritePin>
    LD2(oled_sendbyte(PRECHARGE));   LD2(oled_sendbyte(0xf1));
 800102a:	20d9      	movs	r0, #217	; 0xd9
 800102c:	f7ff ff24 	bl	8000e78 <oled_sendbyte>
 8001030:	2120      	movs	r1, #32
 8001032:	4602      	mov	r2, r0
 8001034:	4620      	mov	r0, r4
 8001036:	f7ff fa85 	bl	8000544 <HAL_GPIO_WritePin>
 800103a:	20f1      	movs	r0, #241	; 0xf1
 800103c:	f7ff ff1c 	bl	8000e78 <oled_sendbyte>
 8001040:	2120      	movs	r1, #32
 8001042:	4602      	mov	r2, r0
 8001044:	4620      	mov	r0, r4
 8001046:	f7ff fa7d 	bl	8000544 <HAL_GPIO_WritePin>
    LD2(oled_sendbyte(VCOMH));       LD2(oled_sendbyte(0x40));
 800104a:	20db      	movs	r0, #219	; 0xdb
 800104c:	f7ff ff14 	bl	8000e78 <oled_sendbyte>
 8001050:	2120      	movs	r1, #32
 8001052:	4602      	mov	r2, r0
 8001054:	4620      	mov	r0, r4
 8001056:	f7ff fa75 	bl	8000544 <HAL_GPIO_WritePin>
 800105a:	2040      	movs	r0, #64	; 0x40
 800105c:	f7ff ff0c 	bl	8000e78 <oled_sendbyte>
 8001060:	2120      	movs	r1, #32
 8001062:	4602      	mov	r2, r0
 8001064:	4620      	mov	r0, r4
 8001066:	f7ff fa6d 	bl	8000544 <HAL_GPIO_WritePin>
    LD2(oled_sendbyte(DISPLAYON(0)));
 800106a:	20a4      	movs	r0, #164	; 0xa4
 800106c:	f7ff ff04 	bl	8000e78 <oled_sendbyte>
 8001070:	2120      	movs	r1, #32
 8001072:	4602      	mov	r2, r0
 8001074:	4620      	mov	r0, r4
 8001076:	f7ff fa65 	bl	8000544 <HAL_GPIO_WritePin>
    LD2(oled_sendbyte(INVERSE(0)));
 800107a:	20a6      	movs	r0, #166	; 0xa6
 800107c:	f7ff fefc 	bl	8000e78 <oled_sendbyte>
 8001080:	2120      	movs	r1, #32
 8001082:	4602      	mov	r2, r0
 8001084:	4620      	mov	r0, r4
 8001086:	f7ff fa5d 	bl	8000544 <HAL_GPIO_WritePin>
    LD2(oled_sendbyte(DISABLESCROLL));
 800108a:	202e      	movs	r0, #46	; 0x2e
 800108c:	f7ff fef4 	bl	8000e78 <oled_sendbyte>
 8001090:	2120      	movs	r1, #32
 8001092:	4602      	mov	r2, r0
 8001094:	4620      	mov	r0, r4
 8001096:	f7ff fa55 	bl	8000544 <HAL_GPIO_WritePin>
    LD2(oled_sendbyte(ONOFF(1)));
 800109a:	20af      	movs	r0, #175	; 0xaf
 800109c:	f7ff feec 	bl	8000e78 <oled_sendbyte>
 80010a0:	2120      	movs	r1, #32
 80010a2:	4602      	mov	r2, r0
 80010a4:	4620      	mov	r0, r4
 80010a6:	f7ff fa4d 	bl	8000544 <HAL_GPIO_WritePin>
    LD2(oled_sendbyte(SETCOL));      LD2(oled_sendbyte(0));   LD2(oled_sendbyte(127));
 80010aa:	2021      	movs	r0, #33	; 0x21
 80010ac:	f7ff fee4 	bl	8000e78 <oled_sendbyte>
 80010b0:	2120      	movs	r1, #32
 80010b2:	4602      	mov	r2, r0
 80010b4:	4620      	mov	r0, r4
 80010b6:	f7ff fa45 	bl	8000544 <HAL_GPIO_WritePin>
 80010ba:	2000      	movs	r0, #0
 80010bc:	f7ff fedc 	bl	8000e78 <oled_sendbyte>
 80010c0:	2120      	movs	r1, #32
 80010c2:	4602      	mov	r2, r0
 80010c4:	4620      	mov	r0, r4
 80010c6:	f7ff fa3d 	bl	8000544 <HAL_GPIO_WritePin>
 80010ca:	207f      	movs	r0, #127	; 0x7f
 80010cc:	f7ff fed4 	bl	8000e78 <oled_sendbyte>
 80010d0:	2120      	movs	r1, #32
 80010d2:	4602      	mov	r2, r0
 80010d4:	4620      	mov	r0, r4
 80010d6:	f7ff fa35 	bl	8000544 <HAL_GPIO_WritePin>
    LD2(oled_sendbyte(SETPAGE));     LD2(oled_sendbyte(0));   LD2(oled_sendbyte(7));
 80010da:	2022      	movs	r0, #34	; 0x22
 80010dc:	f7ff fecc 	bl	8000e78 <oled_sendbyte>
 80010e0:	2120      	movs	r1, #32
 80010e2:	4602      	mov	r2, r0
 80010e4:	4620      	mov	r0, r4
 80010e6:	f7ff fa2d 	bl	8000544 <HAL_GPIO_WritePin>
 80010ea:	2000      	movs	r0, #0
 80010ec:	f7ff fec4 	bl	8000e78 <oled_sendbyte>
 80010f0:	2120      	movs	r1, #32
 80010f2:	4602      	mov	r2, r0
 80010f4:	4620      	mov	r0, r4
 80010f6:	f7ff fa25 	bl	8000544 <HAL_GPIO_WritePin>
 80010fa:	2007      	movs	r0, #7
 80010fc:	f7ff febc 	bl	8000e78 <oled_sendbyte>
 8001100:	2120      	movs	r1, #32
 8001102:	4602      	mov	r2, r0
 8001104:	4620      	mov	r0, r4
 8001106:	f7ff fa1d 	bl	8000544 <HAL_GPIO_WritePin>
    STOPBIT;
 800110a:	4620      	mov	r0, r4
 800110c:	2201      	movs	r2, #1
 800110e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001112:	f7ff fa17 	bl	8000544 <HAL_GPIO_WritePin>
 8001116:	f7ff fe7f 	bl	8000e18 <cdelay>
 800111a:	4628      	mov	r0, r5
 800111c:	2201      	movs	r2, #1
 800111e:	2180      	movs	r1, #128	; 0x80
 8001120:	f7ff fa10 	bl	8000544 <HAL_GPIO_WritePin>
 8001124:	f7ff fe78 	bl	8000e18 <cdelay>
}
 8001128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    LD2(oled_sendbyte(INVERSE(0)));
    LD2(oled_sendbyte(DISABLESCROLL));
    LD2(oled_sendbyte(ONOFF(1)));
    LD2(oled_sendbyte(SETCOL));      LD2(oled_sendbyte(0));   LD2(oled_sendbyte(127));
    LD2(oled_sendbyte(SETPAGE));     LD2(oled_sendbyte(0));   LD2(oled_sendbyte(7));
    STOPBIT;
 800112c:	f7ff be74 	b.w	8000e18 <cdelay>
 8001130:	40020000 	.word	0x40020000
 8001134:	40020400 	.word	0x40020400

08001138 <oled_clear>:
}

void oled_clear(void)
{
 8001138:	b510      	push	{r4, lr}
    uint16_t i, screen_size = DISPLAY_WIDTH * DISPLAY_HEIGHT;
    STARTBIT;
 800113a:	2200      	movs	r2, #0
 800113c:	2180      	movs	r1, #128	; 0x80
 800113e:	481b      	ldr	r0, [pc, #108]	; (80011ac <oled_clear+0x74>)
 8001140:	f7ff fa00 	bl	8000544 <HAL_GPIO_WritePin>
 8001144:	f7ff fe68 	bl	8000e18 <cdelay>
    LD2(oled_sendbyte(ADDRESS+WRITE));
 8001148:	2078      	movs	r0, #120	; 0x78
 800114a:	f7ff fe95 	bl	8000e78 <oled_sendbyte>
 800114e:	2120      	movs	r1, #32
 8001150:	4602      	mov	r2, r0
 8001152:	4817      	ldr	r0, [pc, #92]	; (80011b0 <oled_clear+0x78>)
 8001154:	f7ff f9f6 	bl	8000544 <HAL_GPIO_WritePin>
    LD2(oled_sendbyte(DATA));
 8001158:	2040      	movs	r0, #64	; 0x40
 800115a:	f7ff fe8d 	bl	8000e78 <oled_sendbyte>
 800115e:	2120      	movs	r1, #32
 8001160:	4602      	mov	r2, r0
 8001162:	4813      	ldr	r0, [pc, #76]	; (80011b0 <oled_clear+0x78>)
 8001164:	f7ff f9ee 	bl	8000544 <HAL_GPIO_WritePin>
 8001168:	f44f 5400 	mov.w	r4, #8192	; 0x2000
    for (i = 0; i < screen_size; i++)
        LD2(oled_sendbyte(0x00));
 800116c:	2000      	movs	r0, #0
 800116e:	f7ff fe83 	bl	8000e78 <oled_sendbyte>
 8001172:	3c01      	subs	r4, #1
 8001174:	4602      	mov	r2, r0
 8001176:	2120      	movs	r1, #32
 8001178:	480d      	ldr	r0, [pc, #52]	; (80011b0 <oled_clear+0x78>)
 800117a:	b2a4      	uxth	r4, r4
 800117c:	f7ff f9e2 	bl	8000544 <HAL_GPIO_WritePin>
{
    uint16_t i, screen_size = DISPLAY_WIDTH * DISPLAY_HEIGHT;
    STARTBIT;
    LD2(oled_sendbyte(ADDRESS+WRITE));
    LD2(oled_sendbyte(DATA));
    for (i = 0; i < screen_size; i++)
 8001180:	2c00      	cmp	r4, #0
 8001182:	d1f3      	bne.n	800116c <oled_clear+0x34>
        LD2(oled_sendbyte(0x00));
    STOPBIT;
 8001184:	2201      	movs	r2, #1
 8001186:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800118a:	4809      	ldr	r0, [pc, #36]	; (80011b0 <oled_clear+0x78>)
 800118c:	f7ff f9da 	bl	8000544 <HAL_GPIO_WritePin>
 8001190:	f7ff fe42 	bl	8000e18 <cdelay>
 8001194:	2201      	movs	r2, #1
 8001196:	2180      	movs	r1, #128	; 0x80
 8001198:	4804      	ldr	r0, [pc, #16]	; (80011ac <oled_clear+0x74>)
 800119a:	f7ff f9d3 	bl	8000544 <HAL_GPIO_WritePin>
 800119e:	f7ff fe3b 	bl	8000e18 <cdelay>
}
 80011a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    STARTBIT;
    LD2(oled_sendbyte(ADDRESS+WRITE));
    LD2(oled_sendbyte(DATA));
    for (i = 0; i < screen_size; i++)
        LD2(oled_sendbyte(0x00));
    STOPBIT;
 80011a6:	f7ff be37 	b.w	8000e18 <cdelay>
 80011aa:	bf00      	nop
 80011ac:	40020400 	.word	0x40020400
 80011b0:	40020000 	.word	0x40020000

080011b4 <oled_draw>:
}

void oled_draw(uint8_t field[64][32], Snake snake, Nibble nibble, uint8_t buffer[])
{
 80011b4:	b082      	sub	sp, #8
 80011b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011ba:	f6ad 0d34 	subw	sp, sp, #2100	; 0x834
 80011be:	ac06      	add	r4, sp, #24
 80011c0:	f8cd 385c 	str.w	r3, [sp, #2140]	; 0x85c
    volatile int x, y;
    volatile uint16_t buff_index, i;

    uint8_t display_data[64][32];

    for (x = 0; x < 64; x++)
 80011c4:	2300      	movs	r3, #0
        LD2(oled_sendbyte(0x00));
    STOPBIT;
}

void oled_draw(uint8_t field[64][32], Snake snake, Nibble nibble, uint8_t buffer[])
{
 80011c6:	e884 0006 	stmia.w	r4, {r1, r2}
    volatile int x, y;
    volatile uint16_t buff_index, i;

    uint8_t display_data[64][32];

    for (x = 0; x < 64; x++)
 80011ca:	930a      	str	r3, [sp, #40]	; 0x28
    {
        for (y = 0; y< 32; y++)
 80011cc:	4619      	mov	r1, r3
    volatile int x, y;
    volatile uint16_t buff_index, i;

    uint8_t display_data[64][32];

    for (x = 0; x < 64; x++)
 80011ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80011d0:	2b3f      	cmp	r3, #63	; 0x3f
 80011d2:	dc15      	bgt.n	8001200 <oled_draw+0x4c>
    {
        for (y = 0; y< 32; y++)
 80011d4:	910b      	str	r1, [sp, #44]	; 0x2c
 80011d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80011d8:	2b1f      	cmp	r3, #31
            display_data[x][y] = field[x][y];
 80011da:	9b0a      	ldr	r3, [sp, #40]	; 0x28

    uint8_t display_data[64][32];

    for (x = 0; x < 64; x++)
    {
        for (y = 0; y< 32; y++)
 80011dc:	dc0d      	bgt.n	80011fa <oled_draw+0x46>
            display_data[x][y] = field[x][y];
 80011de:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80011e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80011e2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80011e4:	af0c      	add	r7, sp, #48	; 0x30
 80011e6:	eb00 1242 	add.w	r2, r0, r2, lsl #5
 80011ea:	eb07 1343 	add.w	r3, r7, r3, lsl #5
 80011ee:	5d92      	ldrb	r2, [r2, r6]
 80011f0:	555a      	strb	r2, [r3, r5]

    uint8_t display_data[64][32];

    for (x = 0; x < 64; x++)
    {
        for (y = 0; y< 32; y++)
 80011f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80011f4:	3301      	adds	r3, #1
 80011f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80011f8:	e7ed      	b.n	80011d6 <oled_draw+0x22>
    volatile int x, y;
    volatile uint16_t buff_index, i;

    uint8_t display_data[64][32];

    for (x = 0; x < 64; x++)
 80011fa:	3301      	adds	r3, #1
 80011fc:	930a      	str	r3, [sp, #40]	; 0x28
 80011fe:	e7e6      	b.n	80011ce <oled_draw+0x1a>
    {
        for (y = 0; y< 32; y++)
            display_data[x][y] = field[x][y];
    }

    display_data[nibble.x][nibble.y] = nibble.state;
 8001200:	f89d 385c 	ldrb.w	r3, [sp, #2140]	; 0x85c
 8001204:	f89d 285d 	ldrb.w	r2, [sp, #2141]	; 0x85d
 8001208:	a90c      	add	r1, sp, #48	; 0x30
 800120a:	eb01 1343 	add.w	r3, r1, r3, lsl #5
 800120e:	f89d 185f 	ldrb.w	r1, [sp, #2143]	; 0x85f
 8001212:	5499      	strb	r1, [r3, r2]
    while (snake_node != NULL)
    {
        x = snake_node->x;
        y = snake_node->y;

        display_data[x][y] = 1;
 8001214:	2001      	movs	r0, #1
            display_data[x][y] = field[x][y];
    }

    display_data[nibble.x][nibble.y] = nibble.state;

    Snake *snake_node = &snake;
 8001216:	4622      	mov	r2, r4

    while (snake_node != NULL)
    {
        x = snake_node->x;
 8001218:	7813      	ldrb	r3, [r2, #0]
 800121a:	930a      	str	r3, [sp, #40]	; 0x28
        y = snake_node->y;
 800121c:	7853      	ldrb	r3, [r2, #1]
 800121e:	930b      	str	r3, [sp, #44]	; 0x2c

        display_data[x][y] = 1;
 8001220:	9b0a      	ldr	r3, [sp, #40]	; 0x28

        snake_node = snake_node->previous;
 8001222:	6852      	ldr	r2, [r2, #4]
    while (snake_node != NULL)
    {
        x = snake_node->x;
        y = snake_node->y;

        display_data[x][y] = 1;
 8001224:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001226:	ac0c      	add	r4, sp, #48	; 0x30
 8001228:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 800122c:	5458      	strb	r0, [r3, r1]

    display_data[nibble.x][nibble.y] = nibble.state;

    Snake *snake_node = &snake;

    while (snake_node != NULL)
 800122e:	2a00      	cmp	r2, #0
 8001230:	d1f2      	bne.n	8001218 <oled_draw+0x64>
        snake_node = snake_node->previous;
    }

    x = 0;
    y = 0;
    buff_index = 0;
 8001232:	ab09      	add	r3, sp, #36	; 0x24
        display_data[x][y] = 1;

        snake_node = snake_node->previous;
    }

    x = 0;
 8001234:	920a      	str	r2, [sp, #40]	; 0x28
        buffer[buff_index + 1] = segbyte;
        x++;

        if (x >= 64)
        {
            x = 0;
 8001236:	9205      	str	r2, [sp, #20]

        snake_node = snake_node->previous;
    }

    x = 0;
    y = 0;
 8001238:	920b      	str	r2, [sp, #44]	; 0x2c
    buff_index = 0;
 800123a:	801a      	strh	r2, [r3, #0]
    for (buff_index = 0; buff_index < (DISPLAY_WIDTH * PAGE_HEIGHT); buff_index+=2)
 800123c:	801a      	strh	r2, [r3, #0]
 800123e:	881a      	ldrh	r2, [r3, #0]
 8001240:	b292      	uxth	r2, r2
 8001242:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001246:	d26a      	bcs.n	800131e <oled_draw+0x16a>
    {
        uint8_t segbyte =
                (display_data[x][y] << 0) | (display_data[x][y] << 1) |
 8001248:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800124c:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8001250:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8001254:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
                (display_data[x][y + 1] << 2) | (display_data[x][y + 1] << 3) |
 8001258:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 800125c:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 8001260:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8001262:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
                (display_data[x][y + 2] << 4) | (display_data[x][y + 2] << 5) |
 8001264:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8001266:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001268:	9201      	str	r2, [sp, #4]
 800126a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800126c:	9202      	str	r2, [sp, #8]
 800126e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001270:	9203      	str	r2, [sp, #12]
                (display_data[x][y + 3] << 6) |(display_data[x][y + 3] << 7);
 8001272:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001274:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001276:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001278:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800127a:	9204      	str	r2, [sp, #16]
    y = 0;
    buff_index = 0;
    for (buff_index = 0; buff_index < (DISPLAY_WIDTH * PAGE_HEIGHT); buff_index+=2)
    {
        uint8_t segbyte =
                (display_data[x][y] << 0) | (display_data[x][y] << 1) |
 800127c:	aa0c      	add	r2, sp, #48	; 0x30
 800127e:	eb02 1949 	add.w	r9, r2, r9, lsl #5
 8001282:	eb02 1848 	add.w	r8, r2, r8, lsl #5
                (display_data[x][y + 1] << 2) | (display_data[x][y + 1] << 3) |
 8001286:	eb02 1c4c 	add.w	ip, r2, ip, lsl #5
    x = 0;
    y = 0;
    buff_index = 0;
    for (buff_index = 0; buff_index < (DISPLAY_WIDTH * PAGE_HEIGHT); buff_index+=2)
    {
        uint8_t segbyte =
 800128a:	f818 800a 	ldrb.w	r8, [r8, sl]
 800128e:	f819 900b 	ldrb.w	r9, [r9, fp]
                (display_data[x][y] << 0) | (display_data[x][y] << 1) |
                (display_data[x][y + 1] << 2) | (display_data[x][y + 1] << 3) |
 8001292:	44f4      	add	ip, lr
 8001294:	eb02 1747 	add.w	r7, r2, r7, lsl #5
    x = 0;
    y = 0;
    buff_index = 0;
    for (buff_index = 0; buff_index < (DISPLAY_WIDTH * PAGE_HEIGHT); buff_index+=2)
    {
        uint8_t segbyte =
 8001298:	ea48 0949 	orr.w	r9, r8, r9, lsl #1
                (display_data[x][y] << 0) | (display_data[x][y] << 1) |
                (display_data[x][y + 1] << 2) | (display_data[x][y + 1] << 3) |
 800129c:	443e      	add	r6, r7
    x = 0;
    y = 0;
    buff_index = 0;
    for (buff_index = 0; buff_index < (DISPLAY_WIDTH * PAGE_HEIGHT); buff_index+=2)
    {
        uint8_t segbyte =
 800129e:	f89c 8001 	ldrb.w	r8, [ip, #1]
 80012a2:	ea49 0988 	orr.w	r9, r9, r8, lsl #2
 80012a6:	f896 8001 	ldrb.w	r8, [r6, #1]
                (display_data[x][y] << 0) | (display_data[x][y] << 1) |
                (display_data[x][y + 1] << 2) | (display_data[x][y + 1] << 3) |
                (display_data[x][y + 2] << 4) | (display_data[x][y + 2] << 5) |
 80012aa:	9e01      	ldr	r6, [sp, #4]
 80012ac:	eb02 1545 	add.w	r5, r2, r5, lsl #5
 80012b0:	4435      	add	r5, r6
    x = 0;
    y = 0;
    buff_index = 0;
    for (buff_index = 0; buff_index < (DISPLAY_WIDTH * PAGE_HEIGHT); buff_index+=2)
    {
        uint8_t segbyte =
 80012b2:	ea49 08c8 	orr.w	r8, r9, r8, lsl #3
 80012b6:	f895 9002 	ldrb.w	r9, [r5, #2]
                (display_data[x][y] << 0) | (display_data[x][y] << 1) |
                (display_data[x][y + 1] << 2) | (display_data[x][y + 1] << 3) |
                (display_data[x][y + 2] << 4) | (display_data[x][y + 2] << 5) |
 80012ba:	9d02      	ldr	r5, [sp, #8]
 80012bc:	9e03      	ldr	r6, [sp, #12]
 80012be:	eb02 1545 	add.w	r5, r2, r5, lsl #5
                (display_data[x][y + 3] << 6) |(display_data[x][y + 3] << 7);
 80012c2:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 80012c6:	eb02 1444 	add.w	r4, r2, r4, lsl #5
    for (buff_index = 0; buff_index < (DISPLAY_WIDTH * PAGE_HEIGHT); buff_index+=2)
    {
        uint8_t segbyte =
                (display_data[x][y] << 0) | (display_data[x][y] << 1) |
                (display_data[x][y + 1] << 2) | (display_data[x][y + 1] << 3) |
                (display_data[x][y + 2] << 4) | (display_data[x][y + 2] << 5) |
 80012ca:	4435      	add	r5, r6
                (display_data[x][y + 3] << 6) |(display_data[x][y + 3] << 7);
 80012cc:	9a04      	ldr	r2, [sp, #16]
 80012ce:	4420      	add	r0, r4
    x = 0;
    y = 0;
    buff_index = 0;
    for (buff_index = 0; buff_index < (DISPLAY_WIDTH * PAGE_HEIGHT); buff_index+=2)
    {
        uint8_t segbyte =
 80012d0:	ea48 1809 	orr.w	r8, r8, r9, lsl #4
                (display_data[x][y] << 0) | (display_data[x][y] << 1) |
                (display_data[x][y + 1] << 2) | (display_data[x][y + 1] << 3) |
                (display_data[x][y + 2] << 4) | (display_data[x][y + 2] << 5) |
                (display_data[x][y + 3] << 6) |(display_data[x][y + 3] << 7);
 80012d4:	440a      	add	r2, r1
    x = 0;
    y = 0;
    buff_index = 0;
    for (buff_index = 0; buff_index < (DISPLAY_WIDTH * PAGE_HEIGHT); buff_index+=2)
    {
        uint8_t segbyte =
 80012d6:	f895 9002 	ldrb.w	r9, [r5, #2]
 80012da:	78c0      	ldrb	r0, [r0, #3]
 80012dc:	78d2      	ldrb	r2, [r2, #3]
                (display_data[x][y] << 0) | (display_data[x][y] << 1) |
                (display_data[x][y + 1] << 2) | (display_data[x][y + 1] << 3) |
                (display_data[x][y + 2] << 4) | (display_data[x][y + 2] << 5) |
                (display_data[x][y + 3] << 6) |(display_data[x][y + 3] << 7);

        buffer[buff_index] = segbyte;
 80012de:	8819      	ldrh	r1, [r3, #0]
    x = 0;
    y = 0;
    buff_index = 0;
    for (buff_index = 0; buff_index < (DISPLAY_WIDTH * PAGE_HEIGHT); buff_index+=2)
    {
        uint8_t segbyte =
 80012e0:	ea48 1849 	orr.w	r8, r8, r9, lsl #5
 80012e4:	ea48 1080 	orr.w	r0, r8, r0, lsl #6
 80012e8:	ea40 12c2 	orr.w	r2, r0, r2, lsl #7
                (display_data[x][y] << 0) | (display_data[x][y] << 1) |
                (display_data[x][y + 1] << 2) | (display_data[x][y + 1] << 3) |
                (display_data[x][y + 2] << 4) | (display_data[x][y + 2] << 5) |
                (display_data[x][y + 3] << 6) |(display_data[x][y + 3] << 7);

        buffer[buff_index] = segbyte;
 80012ec:	b289      	uxth	r1, r1
 80012ee:	f8dd 0864 	ldr.w	r0, [sp, #2148]	; 0x864
    x = 0;
    y = 0;
    buff_index = 0;
    for (buff_index = 0; buff_index < (DISPLAY_WIDTH * PAGE_HEIGHT); buff_index+=2)
    {
        uint8_t segbyte =
 80012f2:	b2d2      	uxtb	r2, r2
                (display_data[x][y] << 0) | (display_data[x][y] << 1) |
                (display_data[x][y + 1] << 2) | (display_data[x][y + 1] << 3) |
                (display_data[x][y + 2] << 4) | (display_data[x][y + 2] << 5) |
                (display_data[x][y + 3] << 6) |(display_data[x][y + 3] << 7);

        buffer[buff_index] = segbyte;
 80012f4:	5442      	strb	r2, [r0, r1]
        buffer[buff_index + 1] = segbyte;
 80012f6:	8819      	ldrh	r1, [r3, #0]
 80012f8:	fa10 f181 	uxtah	r1, r0, r1
 80012fc:	704a      	strb	r2, [r1, #1]
        x++;
 80012fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001300:	3201      	adds	r2, #1
 8001302:	920a      	str	r2, [sp, #40]	; 0x28

        if (x >= 64)
 8001304:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001306:	2a3f      	cmp	r2, #63	; 0x3f
 8001308:	dd04      	ble.n	8001314 <oled_draw+0x160>
        {
            x = 0;
 800130a:	9a05      	ldr	r2, [sp, #20]
 800130c:	920a      	str	r2, [sp, #40]	; 0x28
            y += 4;
 800130e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001310:	3204      	adds	r2, #4
 8001312:	920b      	str	r2, [sp, #44]	; 0x2c
    }

    x = 0;
    y = 0;
    buff_index = 0;
    for (buff_index = 0; buff_index < (DISPLAY_WIDTH * PAGE_HEIGHT); buff_index+=2)
 8001314:	881a      	ldrh	r2, [r3, #0]
 8001316:	3202      	adds	r2, #2
 8001318:	b292      	uxth	r2, r2
 800131a:	801a      	strh	r2, [r3, #0]
 800131c:	e78f      	b.n	800123e <oled_draw+0x8a>
            x = 0;
            y += 4;
        }
    }

    STARTBIT;
 800131e:	2200      	movs	r2, #0
 8001320:	2180      	movs	r1, #128	; 0x80
 8001322:	4821      	ldr	r0, [pc, #132]	; (80013a8 <oled_draw+0x1f4>)
 8001324:	f7ff f90e 	bl	8000544 <HAL_GPIO_WritePin>
 8001328:	f7ff fd76 	bl	8000e18 <cdelay>
    LD2(oled_sendbyte(ADDRESS+WRITE));
 800132c:	2078      	movs	r0, #120	; 0x78
 800132e:	f7ff fda3 	bl	8000e78 <oled_sendbyte>
 8001332:	2120      	movs	r1, #32
 8001334:	4602      	mov	r2, r0
 8001336:	481d      	ldr	r0, [pc, #116]	; (80013ac <oled_draw+0x1f8>)
 8001338:	f7ff f904 	bl	8000544 <HAL_GPIO_WritePin>
    LD2(oled_sendbyte(DATA));
 800133c:	2040      	movs	r0, #64	; 0x40
 800133e:	f7ff fd9b 	bl	8000e78 <oled_sendbyte>
 8001342:	2120      	movs	r1, #32
 8001344:	4602      	mov	r2, r0
 8001346:	4819      	ldr	r0, [pc, #100]	; (80013ac <oled_draw+0x1f8>)
 8001348:	f7ff f8fc 	bl	8000544 <HAL_GPIO_WritePin>
    for (i = 0; i < (DISPLAY_WIDTH * PAGE_HEIGHT); i++)
 800134c:	2300      	movs	r3, #0
 800134e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8001352:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8001356:	b29b      	uxth	r3, r3
 8001358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800135c:	d20c      	bcs.n	8001378 <oled_draw+0x1c4>
        oled_sendbyte(buffer[i]);
 800135e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8001362:	f8dd 2864 	ldr.w	r2, [sp, #2148]	; 0x864
 8001366:	b29b      	uxth	r3, r3
 8001368:	5cd0      	ldrb	r0, [r2, r3]
 800136a:	f7ff fd85 	bl	8000e78 <oled_sendbyte>
    }

    STARTBIT;
    LD2(oled_sendbyte(ADDRESS+WRITE));
    LD2(oled_sendbyte(DATA));
    for (i = 0; i < (DISPLAY_WIDTH * PAGE_HEIGHT); i++)
 800136e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8001372:	3301      	adds	r3, #1
 8001374:	b29b      	uxth	r3, r3
 8001376:	e7ea      	b.n	800134e <oled_draw+0x19a>
        oled_sendbyte(buffer[i]);
    STOPBIT;
 8001378:	2201      	movs	r2, #1
 800137a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800137e:	480b      	ldr	r0, [pc, #44]	; (80013ac <oled_draw+0x1f8>)
 8001380:	f7ff f8e0 	bl	8000544 <HAL_GPIO_WritePin>
 8001384:	f7ff fd48 	bl	8000e18 <cdelay>
 8001388:	2201      	movs	r2, #1
 800138a:	2180      	movs	r1, #128	; 0x80
 800138c:	4806      	ldr	r0, [pc, #24]	; (80013a8 <oled_draw+0x1f4>)
 800138e:	f7ff f8d9 	bl	8000544 <HAL_GPIO_WritePin>
 8001392:	f7ff fd41 	bl	8000e18 <cdelay>
 8001396:	f7ff fd3f 	bl	8000e18 <cdelay>
}
 800139a:	f60d 0d34 	addw	sp, sp, #2100	; 0x834
 800139e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013a2:	b002      	add	sp, #8
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	40020400 	.word	0x40020400
 80013ac:	40020000 	.word	0x40020000

080013b0 <init_field>:

    STOPBIT;
}

void init_field(uint8_t field[64][32])
{
 80013b0:	b530      	push	{r4, r5, lr}
 80013b2:	f100 051f 	add.w	r5, r0, #31
 80013b6:	462a      	mov	r2, r5
 80013b8:	2300      	movs	r3, #0
    uint8_t x, y;
    for (x = 0; x < 64; x++)
    {
        field[x][0] = 1;
 80013ba:	2101      	movs	r1, #1
 80013bc:	f802 1c1f 	strb.w	r1, [r2, #-31]
        field[x][31] = 1;
 80013c0:	7011      	strb	r1, [r2, #0]

        if (x == 0)
 80013c2:	b12b      	cbz	r3, 80013d0 <init_field+0x20>
 80013c4:	3301      	adds	r3, #1
}

void init_field(uint8_t field[64][32])
{
    uint8_t x, y;
    for (x = 0; x < 64; x++)
 80013c6:	2b40      	cmp	r3, #64	; 0x40
 80013c8:	f102 0220 	add.w	r2, r2, #32
 80013cc:	d1f6      	bne.n	80013bc <init_field+0xc>
 80013ce:	bd30      	pop	{r4, r5, pc}
 80013d0:	1e44      	subs	r4, r0, #1

        if (x == 0)
        {
            for (y = 0; y < 32; y++)
            {
                field[0][y] = 1;
 80013d2:	f804 1f01 	strb.w	r1, [r4, #1]!
        field[x][0] = 1;
        field[x][31] = 1;

        if (x == 0)
        {
            for (y = 0; y < 32; y++)
 80013d6:	42a5      	cmp	r5, r4
            {
                field[0][y] = 1;
                field[63][y] = 1;
 80013d8:	f884 17e0 	strb.w	r1, [r4, #2016]	; 0x7e0
        field[x][0] = 1;
        field[x][31] = 1;

        if (x == 0)
        {
            for (y = 0; y < 32; y++)
 80013dc:	d1f9      	bne.n	80013d2 <init_field+0x22>
 80013de:	e7f1      	b.n	80013c4 <init_field+0x14>

080013e0 <add_node>:
        }
    }
}

void add_node(Snake **head)
{
 80013e0:	b510      	push	{r4, lr}
 80013e2:	4604      	mov	r4, r0
    Snake *new_head = (Snake *)malloc(sizeof(Snake));
 80013e4:	2008      	movs	r0, #8
 80013e6:	f000 fc0d 	bl	8001c04 <malloc>
    new_head->x = (*head)->x;
 80013ea:	6823      	ldr	r3, [r4, #0]
 80013ec:	781a      	ldrb	r2, [r3, #0]
 80013ee:	7002      	strb	r2, [r0, #0]
    new_head->y = (*head)->y;
 80013f0:	785a      	ldrb	r2, [r3, #1]
 80013f2:	7042      	strb	r2, [r0, #1]
    (*head)->x = 0; //quick fix, remove later?
 80013f4:	2200      	movs	r2, #0
 80013f6:	701a      	strb	r2, [r3, #0]
    (*head)->y = 0; //should do something else /w coordinates.
 80013f8:	6823      	ldr	r3, [r4, #0]
 80013fa:	705a      	strb	r2, [r3, #1]
    new_head->previous = *head;
 80013fc:	6823      	ldr	r3, [r4, #0]
 80013fe:	6043      	str	r3, [r0, #4]
    *head = new_head;
 8001400:	6020      	str	r0, [r4, #0]
 8001402:	bd10      	pop	{r4, pc}

08001404 <delete_node>:
}

void delete_node(Snake **head)
{
    if (*head != NULL)
 8001404:	6803      	ldr	r3, [r0, #0]
 8001406:	b123      	cbz	r3, 8001412 <delete_node+0xe>
    {
        Snake *temp = *head;
        *head = (*head)->previous;
 8001408:	685a      	ldr	r2, [r3, #4]
 800140a:	6002      	str	r2, [r0, #0]
        free(temp);
 800140c:	4618      	mov	r0, r3
 800140e:	f000 bc01 	b.w	8001c14 <free>
 8001412:	4770      	bx	lr

08001414 <init_snake>:
    }
}

void init_snake(Snake **head)
{
 8001414:	b510      	push	{r4, lr}
 8001416:	4604      	mov	r4, r0
    *head = (Snake *)malloc(sizeof(Snake));
 8001418:	2008      	movs	r0, #8
 800141a:	f000 fbf3 	bl	8001c04 <malloc>
    (*head)->x = 4;
 800141e:	2304      	movs	r3, #4
 8001420:	7003      	strb	r3, [r0, #0]
    (*head)->y = 27;
 8001422:	231b      	movs	r3, #27
 8001424:	7043      	strb	r3, [r0, #1]
    (*head)->previous = NULL;
 8001426:	2300      	movs	r3, #0
    }
}

void init_snake(Snake **head)
{
    *head = (Snake *)malloc(sizeof(Snake));
 8001428:	6020      	str	r0, [r4, #0]
    (*head)->x = 4;
    (*head)->y = 27;
    (*head)->previous = NULL;
 800142a:	6043      	str	r3, [r0, #4]

    for (int i = 0; i < 3; i++)
        add_node(head);
 800142c:	4620      	mov	r0, r4
 800142e:	f7ff ffd7 	bl	80013e0 <add_node>
 8001432:	4620      	mov	r0, r4
 8001434:	f7ff ffd4 	bl	80013e0 <add_node>
 8001438:	4620      	mov	r0, r4
}
 800143a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    (*head)->x = 4;
    (*head)->y = 27;
    (*head)->previous = NULL;

    for (int i = 0; i < 3; i++)
        add_node(head);
 800143e:	f7ff bfcf 	b.w	80013e0 <add_node>

08001442 <randomize_nibble>:
}

void randomize_nibble(Snake snake, Nibble *nibble)
{
 8001442:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001446:	e88d 0003 	stmia.w	sp, {r0, r1}
 800144a:	466e      	mov	r6, sp
 800144c:	4690      	mov	r8, r2
 800144e:	f44f 5500 	mov.w	r5, #8192	; 0x2000
    int looped = 0;
    int x, y;
    int coordinate_conflict = 0;
 8001452:	f04f 0900 	mov.w	r9, #0
    do
    {
        x = 4 + (rand() % 56);
 8001456:	2738      	movs	r7, #56	; 0x38
        y = 4 + (rand() % 24);
 8001458:	f04f 0a18 	mov.w	sl, #24
    int looped = 0;
    int x, y;
    int coordinate_conflict = 0;
    do
    {
        x = 4 + (rand() % 56);
 800145c:	f000 fe0c 	bl	8002078 <rand>
 8001460:	fb90 f4f7 	sdiv	r4, r0, r7
 8001464:	fb04 0017 	mls	r0, r4, r7, r0
 8001468:	1d04      	adds	r4, r0, #4
        y = 4 + (rand() % 24);
 800146a:	f000 fe05 	bl	8002078 <rand>
 800146e:	fb90 f3fa 	sdiv	r3, r0, sl
 8001472:	fb03 001a 	mls	r0, r3, sl, r0
 8001476:	3004      	adds	r0, #4

        Snake *check = &snake;
 8001478:	4633      	mov	r3, r6

        while (check != NULL)
        {
            if (x == check->x && y == check->y)
 800147a:	781a      	ldrb	r2, [r3, #0]
 800147c:	4294      	cmp	r4, r2
 800147e:	d102      	bne.n	8001486 <randomize_nibble+0x44>
 8001480:	785a      	ldrb	r2, [r3, #1]
 8001482:	4290      	cmp	r0, r2
 8001484:	d003      	beq.n	800148e <randomize_nibble+0x4c>
            {
                coordinate_conflict = 1;
                break;
            }

            check = check->previous;
 8001486:	685b      	ldr	r3, [r3, #4]
        x = 4 + (rand() % 56);
        y = 4 + (rand() % 24);

        Snake *check = &snake;

        while (check != NULL)
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1f6      	bne.n	800147a <randomize_nibble+0x38>
 800148c:	e001      	b.n	8001492 <randomize_nibble+0x50>
        {
            if (x == check->x && y == check->y)
            {
                coordinate_conflict = 1;
 800148e:	f04f 0901 	mov.w	r9, #1
            }

            check = check->previous;
        }
        looped++;
        if (looped >= 128 * 64) //give up after to many tries
 8001492:	3d01      	subs	r5, #1
 8001494:	d106      	bne.n	80014a4 <randomize_nibble+0x62>
            break;
        }
    }
    while (coordinate_conflict);

    nibble->x = x;
 8001496:	f888 4000 	strb.w	r4, [r8]
    nibble->y = y;
 800149a:	f888 0001 	strb.w	r0, [r8, #1]
}
 800149e:	b002      	add	sp, #8
 80014a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        {
            looped = 0;
            break;
        }
    }
    while (coordinate_conflict);
 80014a4:	f1b9 0f00 	cmp.w	r9, #0
 80014a8:	d1d8      	bne.n	800145c <randomize_nibble+0x1a>
 80014aa:	e7f4      	b.n	8001496 <randomize_nibble+0x54>

080014ac <check_collision>:
    nibble->y = y;
}

uint8_t check_collision(Snake *snake)
{
    int x = snake->x;
 80014ac:	7801      	ldrb	r1, [r0, #0]
    int y = snake->y;
 80014ae:	7843      	ldrb	r3, [r0, #1]
    Snake *current = snake->previous;
 80014b0:	6842      	ldr	r2, [r0, #4]

    while (current != NULL)
 80014b2:	b13a      	cbz	r2, 80014c4 <check_collision+0x18>
    {
        if (current->x == x && current->y == y)
 80014b4:	7810      	ldrb	r0, [r2, #0]
 80014b6:	4281      	cmp	r1, r0
 80014b8:	d102      	bne.n	80014c0 <check_collision+0x14>
 80014ba:	7850      	ldrb	r0, [r2, #1]
 80014bc:	4283      	cmp	r3, r0
 80014be:	d009      	beq.n	80014d4 <check_collision+0x28>
            return 1;
        current = current->previous;
 80014c0:	6852      	ldr	r2, [r2, #4]
 80014c2:	e7f6      	b.n	80014b2 <check_collision+0x6>
    }

    if (x == 0 || x == 63 || y == 0 || y == 31) //if border
 80014c4:	b131      	cbz	r1, 80014d4 <check_collision+0x28>
 80014c6:	293f      	cmp	r1, #63	; 0x3f
 80014c8:	d004      	beq.n	80014d4 <check_collision+0x28>
 80014ca:	b11b      	cbz	r3, 80014d4 <check_collision+0x28>
    Snake *current = snake->previous;

    while (current != NULL)
    {
        if (current->x == x && current->y == y)
            return 1;
 80014cc:	3b1f      	subs	r3, #31
 80014ce:	4258      	negs	r0, r3
 80014d0:	4158      	adcs	r0, r3
 80014d2:	4770      	bx	lr
 80014d4:	2001      	movs	r0, #1

    if (x == 0 || x == 63 || y == 0 || y == 31) //if border
        return 1;

    return 0;
}
 80014d6:	4770      	bx	lr

080014d8 <change_direction>:

    randomize_nibble(**snake, nibble);
}

void change_direction(Direction *current_direction, uint8_t direction_left)
{
 80014d8:	4603      	mov	r3, r0
    if (direction_left)
 80014da:	b109      	cbz	r1, 80014e0 <change_direction+0x8>
 80014dc:	f7ff bc38 	b.w	8000d50 <change_direction.part.0>
            break;
        }
    }
    else //if direction right
    {
        switch (*current_direction)
 80014e0:	7802      	ldrb	r2, [r0, #0]
 80014e2:	2a03      	cmp	r2, #3
 80014e4:	d80b      	bhi.n	80014fe <change_direction+0x26>
 80014e6:	e8df f002 	tbb	[pc, r2]
 80014ea:	0402      	.short	0x0402
 80014ec:	0806      	.short	0x0806
        {
        case UP:
            *current_direction = RIGHT;
 80014ee:	2201      	movs	r2, #1
 80014f0:	e004      	b.n	80014fc <change_direction+0x24>
            break;
        case RIGHT:
            *current_direction = DOWN;
 80014f2:	2202      	movs	r2, #2
 80014f4:	e002      	b.n	80014fc <change_direction+0x24>
            break;
        case DOWN:
            *current_direction = LEFT;
 80014f6:	2203      	movs	r2, #3
 80014f8:	e000      	b.n	80014fc <change_direction+0x24>
            break;
        case LEFT:
            *current_direction = UP;
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
 80014fe:	4770      	bx	lr

08001500 <keyled_sendbyte>:
    STB(HIGH); //end transmission
    CDELAY;
}

void keyled_sendbyte(uint8_t data)
{
 8001500:	b570      	push	{r4, r5, r6, lr}
 8001502:	4606      	mov	r6, r0
 8001504:	2508      	movs	r5, #8
    uint8_t i;

    //falling edge: master send -> rising edge: slave read
    for(i=0x1;i!=0;i<<=1)
 8001506:	2401      	movs	r4, #1
    {
        DIO(!!(data & i)); //!! flips bits above 1 to value 1
 8001508:	4226      	tst	r6, r4
 800150a:	bf14      	ite	ne
 800150c:	2201      	movne	r2, #1
 800150e:	2200      	moveq	r2, #0
 8001510:	2101      	movs	r1, #1
 8001512:	480b      	ldr	r0, [pc, #44]	; (8001540 <keyled_sendbyte+0x40>)
 8001514:	f7ff f816 	bl	8000544 <HAL_GPIO_WritePin>
        CLK(LOW); //DIO outputs data at the falling edge.
 8001518:	2200      	movs	r2, #0
 800151a:	2102      	movs	r1, #2
 800151c:	4808      	ldr	r0, [pc, #32]	; (8001540 <keyled_sendbyte+0x40>)
 800151e:	f7ff f811 	bl	8000544 <HAL_GPIO_WritePin>
        CDELAY; //put delay between pulses
 8001522:	f7ff fc79 	bl	8000e18 <cdelay>
        CLK(HIGH);
 8001526:	2201      	movs	r2, #1
 8001528:	2102      	movs	r1, #2
 800152a:	4805      	ldr	r0, [pc, #20]	; (8001540 <keyled_sendbyte+0x40>)
 800152c:	f7ff f80a 	bl	8000544 <HAL_GPIO_WritePin>
void keyled_sendbyte(uint8_t data)
{
    uint8_t i;

    //falling edge: master send -> rising edge: slave read
    for(i=0x1;i!=0;i<<=1)
 8001530:	0064      	lsls	r4, r4, #1
    {
        DIO(!!(data & i)); //!! flips bits above 1 to value 1
        CLK(LOW); //DIO outputs data at the falling edge.
        CDELAY; //put delay between pulses
        CLK(HIGH);
        CDELAY; //put delay between pulses
 8001532:	f7ff fc71 	bl	8000e18 <cdelay>
void keyled_sendbyte(uint8_t data)
{
    uint8_t i;

    //falling edge: master send -> rising edge: slave read
    for(i=0x1;i!=0;i<<=1)
 8001536:	3d01      	subs	r5, #1
 8001538:	b2e4      	uxtb	r4, r4
 800153a:	d1e5      	bne.n	8001508 <keyled_sendbyte+0x8>
        CLK(LOW); //DIO outputs data at the falling edge.
        CDELAY; //put delay between pulses
        CLK(HIGH);
        CDELAY; //put delay between pulses
    }
}
 800153c:	bd70      	pop	{r4, r5, r6, pc}
 800153e:	bf00      	nop
 8001540:	40020800 	.word	0x40020800

08001544 <keyled_send_command>:
    STB(HIGH);
    CDELAY;
}

void keyled_send_command(uint8_t data)
{
 8001544:	b538      	push	{r3, r4, r5, lr}
    STB(LOW);
 8001546:	4c0a      	ldr	r4, [pc, #40]	; (8001570 <keyled_send_command+0x2c>)
 8001548:	2200      	movs	r2, #0
 800154a:	2101      	movs	r1, #1
    STB(HIGH);
    CDELAY;
}

void keyled_send_command(uint8_t data)
{
 800154c:	4605      	mov	r5, r0
    STB(LOW);
 800154e:	4620      	mov	r0, r4
 8001550:	f7fe fff8 	bl	8000544 <HAL_GPIO_WritePin>
    CDELAY;
 8001554:	f7ff fc60 	bl	8000e18 <cdelay>
    keyled_sendbyte(data);
 8001558:	4628      	mov	r0, r5
 800155a:	f7ff ffd1 	bl	8001500 <keyled_sendbyte>
    STB(HIGH);
 800155e:	2201      	movs	r2, #1
 8001560:	4620      	mov	r0, r4
 8001562:	4611      	mov	r1, r2
 8001564:	f7fe ffee 	bl	8000544 <HAL_GPIO_WritePin>
    CDELAY;
}
 8001568:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
{
    STB(LOW);
    CDELAY;
    keyled_sendbyte(data);
    STB(HIGH);
    CDELAY;
 800156c:	f7ff bc54 	b.w	8000e18 <cdelay>
 8001570:	40020400 	.word	0x40020400

08001574 <keyled_init>:
        }
    }
}

void keyled_init(void)
{
 8001574:	b510      	push	{r4, lr}
    keyled_send_command(KL_DISPLAY | KL_ON | 0x02); //duty-cycle: (0x00: 1/16, 0x02: 4/16, 0x04: 11/16)
 8001576:	208a      	movs	r0, #138	; 0x8a
 8001578:	f7ff ffe4 	bl	8001544 <keyled_send_command>
    keyled_send_command(KL_DATA); //set automatic address
 800157c:	2040      	movs	r0, #64	; 0x40
 800157e:	f7ff ffe1 	bl	8001544 <keyled_send_command>
    STB(LOW);
 8001582:	2200      	movs	r2, #0
 8001584:	2101      	movs	r1, #1
 8001586:	480b      	ldr	r0, [pc, #44]	; (80015b4 <keyled_init+0x40>)
 8001588:	f7fe ffdc 	bl	8000544 <HAL_GPIO_WritePin>
    CDELAY;
 800158c:	f7ff fc44 	bl	8000e18 <cdelay>
    keyled_sendbyte(KL_ADDRESS); //start-adress
 8001590:	20c0      	movs	r0, #192	; 0xc0
 8001592:	f7ff ffb5 	bl	8001500 <keyled_sendbyte>
 8001596:	2410      	movs	r4, #16
    for (int i = 0; i < 16; i++) //clear display RAM
        keyled_sendbyte(0x00);
 8001598:	2000      	movs	r0, #0
 800159a:	f7ff ffb1 	bl	8001500 <keyled_sendbyte>
    keyled_send_command(KL_DISPLAY | KL_ON | 0x02); //duty-cycle: (0x00: 1/16, 0x02: 4/16, 0x04: 11/16)
    keyled_send_command(KL_DATA); //set automatic address
    STB(LOW);
    CDELAY;
    keyled_sendbyte(KL_ADDRESS); //start-adress
    for (int i = 0; i < 16; i++) //clear display RAM
 800159e:	3c01      	subs	r4, #1
 80015a0:	d1fa      	bne.n	8001598 <keyled_init+0x24>
        keyled_sendbyte(0x00);
    STB(HIGH);
 80015a2:	2201      	movs	r2, #1
 80015a4:	4611      	mov	r1, r2
 80015a6:	4803      	ldr	r0, [pc, #12]	; (80015b4 <keyled_init+0x40>)
 80015a8:	f7fe ffcc 	bl	8000544 <HAL_GPIO_WritePin>
    CDELAY;
}
 80015ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    CDELAY;
    keyled_sendbyte(KL_ADDRESS); //start-adress
    for (int i = 0; i < 16; i++) //clear display RAM
        keyled_sendbyte(0x00);
    STB(HIGH);
    CDELAY;
 80015b0:	f7ff bc32 	b.w	8000e18 <cdelay>
 80015b4:	40020400 	.word	0x40020400

080015b8 <keyled_send_led_data>:
    keyled_send_led_data(KL_ADDRESS | (base_address + 0x04), segment_dec_mid);
    keyled_send_led_data(KL_ADDRESS | (base_address + 0x02), segment_dec_high);
}

void keyled_send_led_data(uint8_t address, uint8_t data)
{
 80015b8:	b570      	push	{r4, r5, r6, lr}
    STB(LOW); //begin command
 80015ba:	4c0c      	ldr	r4, [pc, #48]	; (80015ec <keyled_send_led_data+0x34>)
 80015bc:	2200      	movs	r2, #0
    keyled_send_led_data(KL_ADDRESS | (base_address + 0x04), segment_dec_mid);
    keyled_send_led_data(KL_ADDRESS | (base_address + 0x02), segment_dec_high);
}

void keyled_send_led_data(uint8_t address, uint8_t data)
{
 80015be:	4606      	mov	r6, r0
 80015c0:	460d      	mov	r5, r1
    STB(LOW); //begin command
 80015c2:	4620      	mov	r0, r4
 80015c4:	2101      	movs	r1, #1
 80015c6:	f7fe ffbd 	bl	8000544 <HAL_GPIO_WritePin>
    CDELAY;
 80015ca:	f7ff fc25 	bl	8000e18 <cdelay>
    keyled_sendbyte(address);
 80015ce:	4630      	mov	r0, r6
 80015d0:	f7ff ff96 	bl	8001500 <keyled_sendbyte>
    keyled_sendbyte(data);
 80015d4:	4628      	mov	r0, r5
 80015d6:	f7ff ff93 	bl	8001500 <keyled_sendbyte>
    STB(HIGH); //end transmission
 80015da:	2201      	movs	r2, #1
 80015dc:	4620      	mov	r0, r4
 80015de:	4611      	mov	r1, r2
 80015e0:	f7fe ffb0 	bl	8000544 <HAL_GPIO_WritePin>
    CDELAY;
}
 80015e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    STB(LOW); //begin command
    CDELAY;
    keyled_sendbyte(address);
    keyled_sendbyte(data);
    STB(HIGH); //end transmission
    CDELAY;
 80015e8:	f7ff bc16 	b.w	8000e18 <cdelay>
 80015ec:	40020400 	.word	0x40020400

080015f0 <keyled_readbyte>:
}

uint32_t keyled_readbyte(void)
{
 80015f0:	b538      	push	{r3, r4, r5, lr}
    uint32_t i, data = 0x0000;

    STB(LOW); //begin command by lowering STB
 80015f2:	2200      	movs	r2, #0
 80015f4:	2101      	movs	r1, #1
 80015f6:	4818      	ldr	r0, [pc, #96]	; (8001658 <keyled_readbyte+0x68>)
 80015f8:	f7fe ffa4 	bl	8000544 <HAL_GPIO_WritePin>
    CDELAY; //according to timing diagram wait before sending data
 80015fc:	f7ff fc0c 	bl	8000e18 <cdelay>
    keyled_sendbyte(KL_DATA | KL_READ);
 8001600:	2042      	movs	r0, #66	; 0x42
 8001602:	f7ff ff7d 	bl	8001500 <keyled_sendbyte>
    DIO(HIGH); //to read data on open drain, OD needs a power voltage that it can lead to ground.
 8001606:	2201      	movs	r2, #1
 8001608:	4611      	mov	r1, r2
 800160a:	4814      	ldr	r0, [pc, #80]	; (800165c <keyled_readbyte+0x6c>)
 800160c:	f7fe ff9a 	bl	8000544 <HAL_GPIO_WritePin>
    CDELAY; //wait before reading data
 8001610:	f7ff fc02 	bl	8000e18 <cdelay>
    CDELAY;
}

uint32_t keyled_readbyte(void)
{
    uint32_t i, data = 0x0000;
 8001614:	2400      	movs	r4, #0
    keyled_sendbyte(KL_DATA | KL_READ);
    DIO(HIGH); //to read data on open drain, OD needs a power voltage that it can lead to ground.
    CDELAY; //wait before reading data

    //falling edge: slave send -> rising edge: master read
    for (i = 0; i!=32; i++)
 8001616:	4625      	mov	r5, r4
    {
        CLK(LOW); //data output from slave is read into DIO
 8001618:	2200      	movs	r2, #0
 800161a:	2102      	movs	r1, #2
 800161c:	480f      	ldr	r0, [pc, #60]	; (800165c <keyled_readbyte+0x6c>)
 800161e:	f7fe ff91 	bl	8000544 <HAL_GPIO_WritePin>
        CDELAY; //put delay between pulses
 8001622:	f7ff fbf9 	bl	8000e18 <cdelay>
        CLK(HIGH); //now okay for slave to input data again
 8001626:	2201      	movs	r2, #1
 8001628:	2102      	movs	r1, #2
 800162a:	480c      	ldr	r0, [pc, #48]	; (800165c <keyled_readbyte+0x6c>)
 800162c:	f7fe ff8a 	bl	8000544 <HAL_GPIO_WritePin>
        data |= (rDIO << i); //read on positive clock-flank
 8001630:	2101      	movs	r1, #1
 8001632:	480a      	ldr	r0, [pc, #40]	; (800165c <keyled_readbyte+0x6c>)
 8001634:	f7fe ff80 	bl	8000538 <HAL_GPIO_ReadPin>
 8001638:	40a8      	lsls	r0, r5
    keyled_sendbyte(KL_DATA | KL_READ);
    DIO(HIGH); //to read data on open drain, OD needs a power voltage that it can lead to ground.
    CDELAY; //wait before reading data

    //falling edge: slave send -> rising edge: master read
    for (i = 0; i!=32; i++)
 800163a:	3501      	adds	r5, #1
    {
        CLK(LOW); //data output from slave is read into DIO
        CDELAY; //put delay between pulses
        CLK(HIGH); //now okay for slave to input data again
        data |= (rDIO << i); //read on positive clock-flank
 800163c:	4304      	orrs	r4, r0
        CDELAY; //put delay between pulses
 800163e:	f7ff fbeb 	bl	8000e18 <cdelay>
    keyled_sendbyte(KL_DATA | KL_READ);
    DIO(HIGH); //to read data on open drain, OD needs a power voltage that it can lead to ground.
    CDELAY; //wait before reading data

    //falling edge: slave send -> rising edge: master read
    for (i = 0; i!=32; i++)
 8001642:	2d20      	cmp	r5, #32
 8001644:	d1e8      	bne.n	8001618 <keyled_readbyte+0x28>
        CLK(HIGH); //now okay for slave to input data again
        data |= (rDIO << i); //read on positive clock-flank
        CDELAY; //put delay between pulses
    }

    STB(HIGH); //end transmission
 8001646:	2201      	movs	r2, #1
 8001648:	4611      	mov	r1, r2
 800164a:	4803      	ldr	r0, [pc, #12]	; (8001658 <keyled_readbyte+0x68>)
 800164c:	f7fe ff7a 	bl	8000544 <HAL_GPIO_WritePin>
    CDELAY; //wait before next transmission
 8001650:	f7ff fbe2 	bl	8000e18 <cdelay>

    return data;
}
 8001654:	4620      	mov	r0, r4
 8001656:	bd38      	pop	{r3, r4, r5, pc}
 8001658:	40020400 	.word	0x40020400
 800165c:	40020800 	.word	0x40020800

08001660 <keyled_decode_input>:

uint8_t keyled_decode_input(uint32_t value)
{
    return
            (value & 0x00000001)<<7  |
 8001660:	0883      	lsrs	r3, r0, #2
 8001662:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8001666:	0ac3      	lsrs	r3, r0, #11
 8001668:	f003 0320 	and.w	r3, r3, #32
 800166c:	4313      	orrs	r3, r2
 800166e:	0d02      	lsrs	r2, r0, #20
 8001670:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
 8001674:	f002 0210 	and.w	r2, r2, #16
 8001678:	4313      	orrs	r3, r2
 800167a:	0842      	lsrs	r2, r0, #1
 800167c:	f002 0208 	and.w	r2, r2, #8
 8001680:	4313      	orrs	r3, r2
 8001682:	0a82      	lsrs	r2, r0, #10
 8001684:	f002 0204 	and.w	r2, r2, #4
 8001688:	4313      	orrs	r3, r2
 800168a:	0cc2      	lsrs	r2, r0, #19
 800168c:	f002 0202 	and.w	r2, r2, #2
 8001690:	4313      	orrs	r3, r2
 8001692:	f3c0 7000 	ubfx	r0, r0, #28, #1
 8001696:	4318      	orrs	r0, r3
            (value & 0x01000000)>>20 |
            (value & 0x00000010)>>1  |
            (value & 0x00001000)>>10 |
            (value & 0x00100000)>>19 |
            (value & 0x10000000)>>28;
}
 8001698:	b2c0      	uxtb	r0, r0
 800169a:	4770      	bx	lr

0800169c <convert_to_segment>:

SegmentNumber convert_to_segment(uint8_t data)
{
 800169c:	f000 000f 	and.w	r0, r0, #15
 80016a0:	3801      	subs	r0, #1
 80016a2:	b2c0      	uxtb	r0, r0
 80016a4:	280e      	cmp	r0, #14
 80016a6:	bf9a      	itte	ls
 80016a8:	4b01      	ldrls	r3, [pc, #4]	; (80016b0 <convert_to_segment+0x14>)
 80016aa:	5c18      	ldrbls	r0, [r3, r0]
    uint8_t nibble = 0x0F & data; //erase bit 4-7
 80016ac:	203f      	movhi	r0, #63	; 0x3f
    case (0x0D): return D;
    case (0x0E): return E;
    case (0x0F): return F;
    default: return ZERO;
    }
}
 80016ae:	4770      	bx	lr
 80016b0:	0800237e 	.word	0x0800237e

080016b4 <keyled_printscore>:
        CDELAY; //put delay between pulses
    }
}

void keyled_printscore(uint8_t score, uint8_t base_address)
{
 80016b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016b6:	4602      	mov	r2, r0
    uint8_t segment_dec_low, segment_dec_mid, segment_dec_high;
    hundreds = score / 100;
    tens = (score % 100) / 10;
    ones = score % 10;

    segment_dec_low = convert_to_segment(ones);
 80016b8:	250a      	movs	r5, #10
 80016ba:	fbb0 f0f5 	udiv	r0, r0, r5
 80016be:	fb05 2010 	mls	r0, r5, r0, r2
 80016c2:	b2c0      	uxtb	r0, r0
        CDELAY; //put delay between pulses
    }
}

void keyled_printscore(uint8_t score, uint8_t base_address)
{
 80016c4:	460c      	mov	r4, r1
    uint8_t segment_dec_low, segment_dec_mid, segment_dec_high;
    hundreds = score / 100;
    tens = (score % 100) / 10;
    ones = score % 10;

    segment_dec_low = convert_to_segment(ones);
 80016c6:	f7ff ffe9 	bl	800169c <convert_to_segment>
 80016ca:	4601      	mov	r1, r0
    segment_dec_mid = convert_to_segment(tens);
 80016cc:	2064      	movs	r0, #100	; 0x64
 80016ce:	fbb2 f6f0 	udiv	r6, r2, r0
 80016d2:	fb00 2016 	mls	r0, r0, r6, r2
 80016d6:	b2c0      	uxtb	r0, r0
 80016d8:	fbb0 f0f5 	udiv	r0, r0, r5
 80016dc:	f7ff ffde 	bl	800169c <convert_to_segment>
 80016e0:	4607      	mov	r7, r0
    segment_dec_high = convert_to_segment(hundreds);
 80016e2:	b2f0      	uxtb	r0, r6
 80016e4:	f7ff ffda 	bl	800169c <convert_to_segment>
 80016e8:	4605      	mov	r5, r0

    keyled_send_led_data(KL_ADDRESS | (base_address + 0x06), segment_dec_low);
 80016ea:	1da0      	adds	r0, r4, #6
 80016ec:	f060 003f 	orn	r0, r0, #63	; 0x3f
 80016f0:	b2c0      	uxtb	r0, r0
 80016f2:	f7ff ff61 	bl	80015b8 <keyled_send_led_data>
    keyled_send_led_data(KL_ADDRESS | (base_address + 0x04), segment_dec_mid);
 80016f6:	1d20      	adds	r0, r4, #4
 80016f8:	f060 003f 	orn	r0, r0, #63	; 0x3f
 80016fc:	4639      	mov	r1, r7
 80016fe:	b2c0      	uxtb	r0, r0
 8001700:	f7ff ff5a 	bl	80015b8 <keyled_send_led_data>
    keyled_send_led_data(KL_ADDRESS | (base_address + 0x02), segment_dec_high);
 8001704:	1ca0      	adds	r0, r4, #2
 8001706:	f060 003f 	orn	r0, r0, #63	; 0x3f
 800170a:	4629      	mov	r1, r5
 800170c:	b2c0      	uxtb	r0, r0
}
 800170e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    segment_dec_mid = convert_to_segment(tens);
    segment_dec_high = convert_to_segment(hundreds);

    keyled_send_led_data(KL_ADDRESS | (base_address + 0x06), segment_dec_low);
    keyled_send_led_data(KL_ADDRESS | (base_address + 0x04), segment_dec_mid);
    keyled_send_led_data(KL_ADDRESS | (base_address + 0x02), segment_dec_high);
 8001712:	f7ff bf51 	b.w	80015b8 <keyled_send_led_data>

08001716 <restart>:

    return 0;
}

void restart(Snake **snake, Nibble *nibble, uint8_t *score, uint8_t highest_score, Direction *current_direction)
{
 8001716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    *score = 0;
 800171a:	2500      	movs	r5, #0

    return 0;
}

void restart(Snake **snake, Nibble *nibble, uint8_t *score, uint8_t highest_score, Direction *current_direction)
{
 800171c:	4698      	mov	r8, r3
    *score = 0;
 800171e:	7015      	strb	r5, [r2, #0]

    return 0;
}

void restart(Snake **snake, Nibble *nibble, uint8_t *score, uint8_t highest_score, Direction *current_direction)
{
 8001720:	4604      	mov	r4, r0
 8001722:	460e      	mov	r6, r1
    *score = 0;
    keyled_printscore(*score, 0x08);
 8001724:	4628      	mov	r0, r5
 8001726:	2108      	movs	r1, #8

    return 0;
}

void restart(Snake **snake, Nibble *nibble, uint8_t *score, uint8_t highest_score, Direction *current_direction)
{
 8001728:	9f06      	ldr	r7, [sp, #24]
    *score = 0;
    keyled_printscore(*score, 0x08);
 800172a:	f7ff ffc3 	bl	80016b4 <keyled_printscore>
    keyled_printscore(highest_score, 0x00);
 800172e:	4629      	mov	r1, r5
 8001730:	4640      	mov	r0, r8
 8001732:	f7ff ffbf 	bl	80016b4 <keyled_printscore>
    *current_direction = RIGHT;
 8001736:	2301      	movs	r3, #1
 8001738:	703b      	strb	r3, [r7, #0]
    while ((*snake)->previous != NULL)
 800173a:	6823      	ldr	r3, [r4, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
    {
        delete_node(snake);
 800173e:	4620      	mov	r0, r4
{
    *score = 0;
    keyled_printscore(*score, 0x08);
    keyled_printscore(highest_score, 0x00);
    *current_direction = RIGHT;
    while ((*snake)->previous != NULL)
 8001740:	b113      	cbz	r3, 8001748 <restart+0x32>
    {
        delete_node(snake);
 8001742:	f7ff fe5f 	bl	8001404 <delete_node>
 8001746:	e7f8      	b.n	800173a <restart+0x24>
    }
    init_snake(snake);
 8001748:	f7ff fe64 	bl	8001414 <init_snake>

    randomize_nibble(**snake, nibble);
 800174c:	6823      	ldr	r3, [r4, #0]
 800174e:	4632      	mov	r2, r6
 8001750:	e893 0003 	ldmia.w	r3, {r0, r1}
}
 8001754:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    {
        delete_node(snake);
    }
    init_snake(snake);

    randomize_nibble(**snake, nibble);
 8001758:	f7ff be73 	b.w	8001442 <randomize_nibble>

0800175c <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 800175c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001760:	f6ad 4d34 	subw	sp, sp, #3124	; 0xc34
{

    GPIO_InitTypeDef GPIO_InitStruct;

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001764:	2400      	movs	r4, #0
    /* USER CODE END 1 */

    /* MCU Configuration----------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8001766:	f7fe fd75 	bl	8000254 <HAL_Init>

    /* Configure the system clock */
    SystemClock_Config();
 800176a:	f7ff fb01 	bl	8000d70 <SystemClock_Config>
{

    GPIO_InitTypeDef GPIO_InitStruct;

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800176e:	4baf      	ldr	r3, [pc, #700]	; (8001a2c <main+0x2d0>)
 8001770:	9406      	str	r4, [sp, #24]
 8001772:	6b1a      	ldr	r2, [r3, #48]	; 0x30

    /*Configure GPIO pin : B1_Pin */
    GPIO_InitStruct.Pin = B1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001774:	48ae      	ldr	r0, [pc, #696]	; (8001a30 <main+0x2d4>)
{

    GPIO_InitTypeDef GPIO_InitStruct;

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001776:	f042 0204 	orr.w	r2, r2, #4
 800177a:	631a      	str	r2, [r3, #48]	; 0x30
 800177c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800177e:	f002 0204 	and.w	r2, r2, #4
 8001782:	9206      	str	r2, [sp, #24]
 8001784:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001786:	9407      	str	r4, [sp, #28]
 8001788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800178a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800178e:	631a      	str	r2, [r3, #48]	; 0x30
 8001790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001792:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001796:	9207      	str	r2, [sp, #28]
 8001798:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179a:	9408      	str	r4, [sp, #32]
 800179c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800179e:	f042 0201 	orr.w	r2, r2, #1
 80017a2:	631a      	str	r2, [r3, #48]	; 0x30
 80017a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017a6:	f002 0201 	and.w	r2, r2, #1
 80017aa:	9208      	str	r2, [sp, #32]
 80017ac:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ae:	9409      	str	r4, [sp, #36]	; 0x24
 80017b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017b2:	f042 0202 	orr.w	r2, r2, #2
 80017b6:	631a      	str	r2, [r3, #48]	; 0x30
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30

    /*Configure GPIO pin : B1_Pin */
    GPIO_InitStruct.Pin = B1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	f8cd 4438 	str.w	r4, [sp, #1080]	; 0x438

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
    __HAL_RCC_GPIOH_CLK_ENABLE();
    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	9309      	str	r3, [sp, #36]	; 0x24
 80017c4:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /*Configure GPIO pin : B1_Pin */
    GPIO_InitStruct.Pin = B1_Pin;
 80017c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017ca:	f8cd 3430 	str.w	r3, [sp, #1072]	; 0x430
    GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017ce:	f50d 6186 	add.w	r1, sp, #1072	; 0x430
    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();

    /*Configure GPIO pin : B1_Pin */
    GPIO_InitStruct.Pin = B1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80017d2:	4b98      	ldr	r3, [pc, #608]	; (8001a34 <main+0x2d8>)
 80017d4:	f8cd 3434 	str.w	r3, [sp, #1076]	; 0x434
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

    /*Configure GPIO pin : DIO_Pin */
    GPIO_InitStruct.Pin = DIO_Pin;
 80017d8:	2501      	movs	r5, #1

    /*Configure GPIO pin : B1_Pin */
    GPIO_InitStruct.Pin = B1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017da:	f7fe fddf 	bl	800039c <HAL_GPIO_Init>

    /*Configure GPIO pin : DIO_Pin */
    GPIO_InitStruct.Pin = DIO_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80017de:	2711      	movs	r7, #17
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(DIO_GPIO_Port, &GPIO_InitStruct);
 80017e0:	f50d 6186 	add.w	r1, sp, #1072	; 0x430
 80017e4:	4892      	ldr	r0, [pc, #584]	; (8001a30 <main+0x2d4>)
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

    /*Configure GPIO pin : DIO_Pin */
    GPIO_InitStruct.Pin = DIO_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	f8cd 4438 	str.w	r4, [sp, #1080]	; 0x438
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	f8cd 443c 	str.w	r4, [sp, #1084]	; 0x43c
    GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

    /*Configure GPIO pin : DIO_Pin */
    GPIO_InitStruct.Pin = DIO_Pin;
 80017ee:	f8cd 5430 	str.w	r5, [sp, #1072]	; 0x430
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80017f2:	f8cd 7434 	str.w	r7, [sp, #1076]	; 0x434
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(DIO_GPIO_Port, &GPIO_InitStruct);
 80017f6:	f7fe fdd1 	bl	800039c <HAL_GPIO_Init>

    /*Configure GPIO pin : CLK_Pin */
    GPIO_InitStruct.Pin = CLK_Pin;
 80017fa:	2302      	movs	r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(CLK_GPIO_Port, &GPIO_InitStruct);
 80017fc:	f50d 6186 	add.w	r1, sp, #1072	; 0x430
 8001800:	488b      	ldr	r0, [pc, #556]	; (8001a30 <main+0x2d4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(DIO_GPIO_Port, &GPIO_InitStruct);

    /*Configure GPIO pin : CLK_Pin */
    GPIO_InitStruct.Pin = CLK_Pin;
 8001802:	f8cd 3430 	str.w	r3, [sp, #1072]	; 0x430
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	f8cd 4438 	str.w	r4, [sp, #1080]	; 0x438
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180a:	f8cd 443c 	str.w	r4, [sp, #1084]	; 0x43c
    HAL_GPIO_Init(CLK_GPIO_Port, &GPIO_InitStruct);

    /*Configure GPIO pins : LD2_Pin SCL_Pin */
    GPIO_InitStruct.Pin = LD2_Pin|SCL_Pin;
 800180e:	f248 0620 	movw	r6, #32800	; 0x8020
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(DIO_GPIO_Port, &GPIO_InitStruct);

    /*Configure GPIO pin : CLK_Pin */
    GPIO_InitStruct.Pin = CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001812:	f8cd 5434 	str.w	r5, [sp, #1076]	; 0x434
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(CLK_GPIO_Port, &GPIO_InitStruct);
 8001816:	f7fe fdc1 	bl	800039c <HAL_GPIO_Init>
    /*Configure GPIO pins : LD2_Pin SCL_Pin */
    GPIO_InitStruct.Pin = LD2_Pin|SCL_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181a:	f50d 6186 	add.w	r1, sp, #1072	; 0x430
 800181e:	4886      	ldr	r0, [pc, #536]	; (8001a38 <main+0x2dc>)
    HAL_GPIO_Init(CLK_GPIO_Port, &GPIO_InitStruct);

    /*Configure GPIO pins : LD2_Pin SCL_Pin */
    GPIO_InitStruct.Pin = LD2_Pin|SCL_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	f8cd 4438 	str.w	r4, [sp, #1080]	; 0x438
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001824:	f8cd 443c 	str.w	r4, [sp, #1084]	; 0x43c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(CLK_GPIO_Port, &GPIO_InitStruct);

    /*Configure GPIO pins : LD2_Pin SCL_Pin */
    GPIO_InitStruct.Pin = LD2_Pin|SCL_Pin;
 8001828:	f8cd 6430 	str.w	r6, [sp, #1072]	; 0x430
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182c:	f8cd 5434 	str.w	r5, [sp, #1076]	; 0x434
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001830:	f7fe fdb4 	bl	800039c <HAL_GPIO_Init>
    /*Configure GPIO pin : STB_Pin */
    GPIO_InitStruct.Pin = STB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(STB_GPIO_Port, &GPIO_InitStruct);
 8001834:	f50d 6186 	add.w	r1, sp, #1072	; 0x430
 8001838:	4880      	ldr	r0, [pc, #512]	; (8001a3c <main+0x2e0>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /*Configure GPIO pin : STB_Pin */
    GPIO_InitStruct.Pin = STB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	f8cd 4438 	str.w	r4, [sp, #1080]	; 0x438
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183e:	f8cd 443c 	str.w	r4, [sp, #1084]	; 0x43c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /*Configure GPIO pin : STB_Pin */
    GPIO_InitStruct.Pin = STB_Pin;
 8001842:	f8cd 5430 	str.w	r5, [sp, #1072]	; 0x430
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001846:	f8cd 5434 	str.w	r5, [sp, #1076]	; 0x434
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(STB_GPIO_Port, &GPIO_InitStruct);
 800184a:	f7fe fda7 	bl	800039c <HAL_GPIO_Init>

    /*Configure GPIO pin : SDA_Pin */
    GPIO_InitStruct.Pin = SDA_Pin;
 800184e:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 8001850:	f50d 6186 	add.w	r1, sp, #1072	; 0x430
 8001854:	4879      	ldr	r0, [pc, #484]	; (8001a3c <main+0x2e0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(STB_GPIO_Port, &GPIO_InitStruct);

    /*Configure GPIO pin : SDA_Pin */
    GPIO_InitStruct.Pin = SDA_Pin;
 8001856:	f8cd 3430 	str.w	r3, [sp, #1072]	; 0x430
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	f8cd 4438 	str.w	r4, [sp, #1080]	; 0x438
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185e:	f8cd 443c 	str.w	r4, [sp, #1084]	; 0x43c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(STB_GPIO_Port, &GPIO_InitStruct);

    /*Configure GPIO pin : SDA_Pin */
    GPIO_InitStruct.Pin = SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001862:	f8cd 7434 	str.w	r7, [sp, #1076]	; 0x434
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 8001866:	f7fe fd99 	bl	800039c <HAL_GPIO_Init>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, DIO_Pin|CLK_Pin, GPIO_PIN_RESET);
 800186a:	4622      	mov	r2, r4
 800186c:	2103      	movs	r1, #3
 800186e:	4870      	ldr	r0, [pc, #448]	; (8001a30 <main+0x2d4>)
 8001870:	f7fe fe68 	bl	8000544 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, LD2_Pin|SCL_Pin, GPIO_PIN_RESET);
 8001874:	4622      	mov	r2, r4
 8001876:	4631      	mov	r1, r6
 8001878:	486f      	ldr	r0, [pc, #444]	; (8001a38 <main+0x2dc>)
 800187a:	f7fe fe63 	bl	8000544 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, STB_Pin|SDA_Pin, GPIO_PIN_RESET);
 800187e:	4622      	mov	r2, r4
 8001880:	2181      	movs	r1, #129	; 0x81
 8001882:	486e      	ldr	r0, [pc, #440]	; (8001a3c <main+0x2e0>)
 8001884:	f7fe fe5e 	bl	8000544 <HAL_GPIO_WritePin>

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

    huart2.Instance = USART2;
 8001888:	486d      	ldr	r0, [pc, #436]	; (8001a40 <main+0x2e4>)
    huart2.Init.BaudRate = 115200;
 800188a:	496e      	ldr	r1, [pc, #440]	; (8001a44 <main+0x2e8>)
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800188c:	6084      	str	r4, [r0, #8]
/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

    huart2.Instance = USART2;
    huart2.Init.BaudRate = 115200;
 800188e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001892:	e880 000a 	stmia.w	r0, {r1, r3}
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
    huart2.Init.StopBits = UART_STOPBITS_1;
    huart2.Init.Parity = UART_PARITY_NONE;
    huart2.Init.Mode = UART_MODE_TX_RX;
 8001896:	230c      	movs	r3, #12
{

    huart2.Instance = USART2;
    huart2.Init.BaudRate = 115200;
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
    huart2.Init.StopBits = UART_STOPBITS_1;
 8001898:	60c4      	str	r4, [r0, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 800189a:	6104      	str	r4, [r0, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800189c:	6184      	str	r4, [r0, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800189e:	61c4      	str	r4, [r0, #28]
    huart2.Instance = USART2;
    huart2.Init.BaudRate = 115200;
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
    huart2.Init.StopBits = UART_STOPBITS_1;
    huart2.Init.Parity = UART_PARITY_NONE;
    huart2.Init.Mode = UART_MODE_TX_RX;
 80018a0:	6143      	str	r3, [r0, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
    if (HAL_UART_Init(&huart2) != HAL_OK)
 80018a2:	f7ff fa27 	bl	8000cf4 <HAL_UART_Init>
 80018a6:	4604      	mov	r4, r0
 80018a8:	b100      	cbz	r0, 80018ac <main+0x150>
 80018aa:	e7fe      	b.n	80018aa <main+0x14e>

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */

    Snake *snake;
    uint8_t field[64][32] = {0};
 80018ac:	4601      	mov	r1, r0
 80018ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
    uint8_t score = 0, highest_score = 0;
    uint8_t buffer[DISPLAY_WIDTH * PAGE_HEIGHT] = {0};
 80018b2:	ae0c      	add	r6, sp, #48	; 0x30

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */

    Snake *snake;
    uint8_t field[64][32] = {0};
 80018b4:	f50d 6086 	add.w	r0, sp, #1072	; 0x430
 80018b8:	f000 fbd4 	bl	8002064 <memset>
    uint8_t score = 0, highest_score = 0;
    uint8_t buffer[DISPLAY_WIDTH * PAGE_HEIGHT] = {0};
 80018bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018c0:	4621      	mov	r1, r4
 80018c2:	4630      	mov	r0, r6
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */

    Snake *snake;
    uint8_t field[64][32] = {0};
    uint8_t score = 0, highest_score = 0;
 80018c4:	f88d 400e 	strb.w	r4, [sp, #14]
    uint8_t buffer[DISPLAY_WIDTH * PAGE_HEIGHT] = {0};
 80018c8:	f000 fbcc 	bl	8002064 <memset>
    uint8_t old_x , old_y, temp;
    Direction *current_direction = malloc(sizeof(Direction));
 80018cc:	4628      	mov	r0, r5
 80018ce:	f000 f999 	bl	8001c04 <malloc>
    uint8_t right_pressed = 0;
    volatile uint32_t input_data;
    volatile uint8_t keymask;
    Snake *snake_prev;

    Nibble nibble =
 80018d2:	4b5d      	ldr	r3, [pc, #372]	; (8001a48 <main+0x2ec>)
    Snake *snake;
    uint8_t field[64][32] = {0};
    uint8_t score = 0, highest_score = 0;
    uint8_t buffer[DISPLAY_WIDTH * PAGE_HEIGHT] = {0};
    uint8_t old_x , old_y, temp;
    Direction *current_direction = malloc(sizeof(Direction));
 80018d4:	4680      	mov	r8, r0
    uint8_t right_pressed = 0;
    volatile uint32_t input_data;
    volatile uint8_t keymask;
    Snake *snake_prev;

    Nibble nibble =
 80018d6:	6818      	ldr	r0, [r3, #0]
 80018d8:	900a      	str	r0, [sp, #40]	; 0x28
 80018da:	889b      	ldrh	r3, [r3, #4]
 80018dc:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            .cur_delay = 0
    };

    *current_direction = RIGHT;

    init_snake(&snake);
 80018e0:	a804      	add	r0, sp, #16
            .state = 1,
            .max_delay = 10,
            .cur_delay = 0
    };

    *current_direction = RIGHT;
 80018e2:	f888 5000 	strb.w	r5, [r8]

    init_snake(&snake);
 80018e6:	f7ff fd95 	bl	8001414 <init_snake>
    init_field(field);
 80018ea:	f50d 6086 	add.w	r0, sp, #1072	; 0x430
 80018ee:	f7ff fd5f 	bl	80013b0 <init_field>
    oled_init();
 80018f2:	f7ff fadf 	bl	8000eb4 <oled_init>
    oled_clear();
 80018f6:	f7ff fc1f 	bl	8001138 <oled_clear>
    keyled_init();
 80018fa:	f7ff fe3b 	bl	8001574 <keyled_init>
    oled_draw(field, *snake, nibble, buffer);
 80018fe:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8001902:	9a04      	ldr	r2, [sp, #16]
 8001904:	f8ad 3000 	strh.w	r3, [sp]
 8001908:	9601      	str	r6, [sp, #4]
 800190a:	ca06      	ldmia	r2, {r1, r2}
 800190c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800190e:	f50d 6086 	add.w	r0, sp, #1072	; 0x430
 8001912:	f7ff fc4f 	bl	80011b4 <oled_draw>
    keyled_printscore(score, 0x08);
 8001916:	2108      	movs	r1, #8
 8001918:	f89d 000e 	ldrb.w	r0, [sp, #14]
 800191c:	f7ff feca 	bl	80016b4 <keyled_printscore>
    uint8_t field[64][32] = {0};
    uint8_t score = 0, highest_score = 0;
    uint8_t buffer[DISPLAY_WIDTH * PAGE_HEIGHT] = {0};
    uint8_t old_x , old_y, temp;
    Direction *current_direction = malloc(sizeof(Direction));
    uint8_t left_pressed = 0;
 8001920:	4627      	mov	r7, r4
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */

    Snake *snake;
    uint8_t field[64][32] = {0};
    uint8_t score = 0, highest_score = 0;
 8001922:	46a1      	mov	r9, r4
    oled_draw(field, *snake, nibble, buffer);
    keyled_printscore(score, 0x08);

    while (1)
    {
        input_data = keyled_readbyte(); //read from keys
 8001924:	f7ff fe64 	bl	80015f0 <keyled_readbyte>
 8001928:	9005      	str	r0, [sp, #20]
        keymask = keyled_decode_input(input_data);
 800192a:	9805      	ldr	r0, [sp, #20]
 800192c:	f7ff fe98 	bl	8001660 <keyled_decode_input>
 8001930:	f88d 000f 	strb.w	r0, [sp, #15]

        if (left_pressed == 0 && keymask & 0x80) //LEFT KEY
 8001934:	b947      	cbnz	r7, 8001948 <main+0x1ec>
 8001936:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800193a:	061a      	lsls	r2, r3, #24
 800193c:	d507      	bpl.n	800194e <main+0x1f2>
 800193e:	4640      	mov	r0, r8
 8001940:	f7ff fa06 	bl	8000d50 <change_direction.part.0>
        {
            left_pressed = 1;
 8001944:	2701      	movs	r7, #1
 8001946:	e002      	b.n	800194e <main+0x1f2>
            change_direction(current_direction, 1);
        }
        else if (left_pressed == 1 && !(keymask & 0x80)) //IF LEFT KEY RELEASED
 8001948:	f89d 700f 	ldrb.w	r7, [sp, #15]
        input_data = keyled_readbyte(); //read from keys
        keymask = keyled_decode_input(input_data);

        if (left_pressed == 0 && keymask & 0x80) //LEFT KEY
        {
            left_pressed = 1;
 800194c:	09ff      	lsrs	r7, r7, #7
        }
        else if (left_pressed == 1 && !(keymask & 0x80)) //IF LEFT KEY RELEASED
        {
            left_pressed = 0;
        }
        if (right_pressed == 0 && keymask & 0x40) //RIGHT KEY
 800194e:	b94c      	cbnz	r4, 8001964 <main+0x208>
 8001950:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001954:	065b      	lsls	r3, r3, #25
 8001956:	d509      	bpl.n	800196c <main+0x210>
        {
            right_pressed = 1;
            change_direction(current_direction, 0);
 8001958:	4621      	mov	r1, r4
 800195a:	4640      	mov	r0, r8
 800195c:	f7ff fdbc 	bl	80014d8 <change_direction>
        {
            left_pressed = 0;
        }
        if (right_pressed == 0 && keymask & 0x40) //RIGHT KEY
        {
            right_pressed = 1;
 8001960:	2401      	movs	r4, #1
            change_direction(current_direction, 0);
 8001962:	e003      	b.n	800196c <main+0x210>
        }
        else if (right_pressed == 1 && !(keymask & 0x40)) //IF RIGHT KEY RELEASED
 8001964:	f89d 400f 	ldrb.w	r4, [sp, #15]
        {
            left_pressed = 0;
        }
        if (right_pressed == 0 && keymask & 0x40) //RIGHT KEY
        {
            right_pressed = 1;
 8001968:	f3c4 1480 	ubfx	r4, r4, #6, #1
        else if (right_pressed == 1 && !(keymask & 0x40)) //IF RIGHT KEY RELEASED
        {
            right_pressed = 0;
        }

        if (nibble.eaten)
 800196c:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 8001970:	b163      	cbz	r3, 800198c <main+0x230>
        {
            if (nibble.eaten == 4) //if eaten, wait randomizing nibble again
 8001972:	2b04      	cmp	r3, #4
 8001974:	d107      	bne.n	8001986 <main+0x22a>
            {
                randomize_nibble(*snake, &nibble);
 8001976:	9b04      	ldr	r3, [sp, #16]
 8001978:	aa0a      	add	r2, sp, #40	; 0x28
 800197a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800197e:	f7ff fd60 	bl	8001442 <randomize_nibble>
                nibble.eaten = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	e000      	b.n	8001988 <main+0x22c>
            }
            else {
                nibble.eaten++;
 8001986:	3301      	adds	r3, #1
 8001988:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
            }
        }

        old_x = snake->x;
 800198c:	9d04      	ldr	r5, [sp, #16]
        old_y = snake->y;
        snake_prev = snake->previous;

        //check direction, update position of the snake's head-node
        switch (*current_direction)
 800198e:	f898 0000 	ldrb.w	r0, [r8]
            else {
                nibble.eaten++;
            }
        }

        old_x = snake->x;
 8001992:	782a      	ldrb	r2, [r5, #0]
        old_y = snake->y;
 8001994:	7869      	ldrb	r1, [r5, #1]
        snake_prev = snake->previous;
 8001996:	686b      	ldr	r3, [r5, #4]

        //check direction, update position of the snake's head-node
        switch (*current_direction)
 8001998:	2803      	cmp	r0, #3
 800199a:	d816      	bhi.n	80019ca <main+0x26e>
 800199c:	e8df f000 	tbb	[pc, r0]
 80019a0:	09060402 	.word	0x09060402
        {
        case UP:
            snake->y--;
 80019a4:	1e48      	subs	r0, r1, #1
 80019a6:	e002      	b.n	80019ae <main+0x252>
            break;
        case RIGHT:
            snake->x++;
 80019a8:	1c50      	adds	r0, r2, #1
 80019aa:	e003      	b.n	80019b4 <main+0x258>
            break;
        case DOWN:
            snake->y++;
 80019ac:	1c48      	adds	r0, r1, #1
 80019ae:	7068      	strb	r0, [r5, #1]
            break;
 80019b0:	e00b      	b.n	80019ca <main+0x26e>
        case LEFT:
            snake->x--;
 80019b2:	1e50      	subs	r0, r2, #1
 80019b4:	7028      	strb	r0, [r5, #0]
            break;
 80019b6:	e008      	b.n	80019ca <main+0x26e>
        }

        //go through all snake-nodes and let each child get the parents position
        while (snake_prev != NULL)
        {
            if (snake_prev->x == old_x && snake_prev->y == old_y)
 80019b8:	7818      	ldrb	r0, [r3, #0]
 80019ba:	4282      	cmp	r2, r0
 80019bc:	d008      	beq.n	80019d0 <main+0x274>
            {
                break;
            }
            temp = snake_prev->x;
            snake_prev->x = old_x;
 80019be:	701a      	strb	r2, [r3, #0]
            old_x = temp;
            temp = (*snake_prev).y;
 80019c0:	785a      	ldrb	r2, [r3, #1]
            snake_prev->y = old_y;
 80019c2:	7059      	strb	r1, [r3, #1]
            old_y = temp;
            snake_prev = snake_prev->previous; //giving previous node coordinates
 80019c4:	685b      	ldr	r3, [r3, #4]
            temp = snake_prev->x;
            snake_prev->x = old_x;
            old_x = temp;
            temp = (*snake_prev).y;
            snake_prev->y = old_y;
            old_y = temp;
 80019c6:	4611      	mov	r1, r2
        }

        //go through all snake-nodes and let each child get the parents position
        while (snake_prev != NULL)
        {
            if (snake_prev->x == old_x && snake_prev->y == old_y)
 80019c8:	4602      	mov	r2, r0
            snake->x--;
            break;
        }

        //go through all snake-nodes and let each child get the parents position
        while (snake_prev != NULL)
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f4      	bne.n	80019b8 <main+0x25c>
 80019ce:	e003      	b.n	80019d8 <main+0x27c>
        {
            if (snake_prev->x == old_x && snake_prev->y == old_y)
 80019d0:	f893 e001 	ldrb.w	lr, [r3, #1]
 80019d4:	458e      	cmp	lr, r1
 80019d6:	d1f2      	bne.n	80019be <main+0x262>
            old_y = temp;
            snake_prev = snake_prev->previous; //giving previous node coordinates
        }

        //make sure nibble blinks every time delay >= max_delay
        if (nibble.cur_delay >= nibble.max_delay && nibble.eaten == 0)
 80019d8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 80019dc:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d80b      	bhi.n	80019fc <main+0x2a0>
 80019e4:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 80019e8:	b942      	cbnz	r2, 80019fc <main+0x2a0>
        {
            nibble.cur_delay = 0;
            nibble.state ^= 1;
 80019ea:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
        }

        //make sure nibble blinks every time delay >= max_delay
        if (nibble.cur_delay >= nibble.max_delay && nibble.eaten == 0)
        {
            nibble.cur_delay = 0;
 80019ee:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
            nibble.state ^= 1;
 80019f2:	f083 0301 	eor.w	r3, r3, #1
 80019f6:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80019fa:	e002      	b.n	8001a02 <main+0x2a6>
        }
        else
            nibble.cur_delay++;
 80019fc:	3301      	adds	r3, #1
 80019fe:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

        //if collision, update highscore and restart game
        if (check_collision(snake))
 8001a02:	4628      	mov	r0, r5
 8001a04:	f7ff fd52 	bl	80014ac <check_collision>
 8001a08:	b300      	cbz	r0, 8001a4c <main+0x2f0>
        {
            if (score > highest_score)
 8001a0a:	f89d 300e 	ldrb.w	r3, [sp, #14]
                highest_score = score;
            restart(&snake, &nibble, &score, highest_score, current_direction);
 8001a0e:	f8cd 8000 	str.w	r8, [sp]
 8001a12:	4599      	cmp	r9, r3
 8001a14:	bf38      	it	cc
 8001a16:	4699      	movcc	r9, r3
 8001a18:	fa5f f989 	uxtb.w	r9, r9
 8001a1c:	464b      	mov	r3, r9
 8001a1e:	f10d 020e 	add.w	r2, sp, #14
 8001a22:	a90a      	add	r1, sp, #40	; 0x28
 8001a24:	a804      	add	r0, sp, #16
 8001a26:	f7ff fe76 	bl	8001716 <restart>
 8001a2a:	e02e      	b.n	8001a8a <main+0x32e>
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40020800 	.word	0x40020800
 8001a34:	10120000 	.word	0x10120000
 8001a38:	40020000 	.word	0x40020000
 8001a3c:	40020400 	.word	0x40020400
 8001a40:	20000560 	.word	0x20000560
 8001a44:	40004400 	.word	0x40004400
 8001a48:	08002368 	.word	0x08002368
        }
        else
        {
            if (snake->x == nibble.x && snake->y == nibble.y)
 8001a4c:	782a      	ldrb	r2, [r5, #0]
 8001a4e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d119      	bne.n	8001a8a <main+0x32e>
 8001a56:	786a      	ldrb	r2, [r5, #1]
 8001a58:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d114      	bne.n	8001a8a <main+0x32e>
            {
                for (int i = 0; i < 3; i++)
                    add_node(&snake);
 8001a60:	a804      	add	r0, sp, #16
 8001a62:	f7ff fcbd 	bl	80013e0 <add_node>
 8001a66:	a804      	add	r0, sp, #16
 8001a68:	f7ff fcba 	bl	80013e0 <add_node>
 8001a6c:	a804      	add	r0, sp, #16
 8001a6e:	f7ff fcb7 	bl	80013e0 <add_node>

                nibble.eaten = 1;
                score++;
 8001a72:	f89d 000e 	ldrb.w	r0, [sp, #14]
            if (snake->x == nibble.x && snake->y == nibble.y)
            {
                for (int i = 0; i < 3; i++)
                    add_node(&snake);

                nibble.eaten = 1;
 8001a76:	2301      	movs	r3, #1
                score++;
 8001a78:	4418      	add	r0, r3
 8001a7a:	b2c0      	uxtb	r0, r0
                keyled_printscore(score, 0x08);
 8001a7c:	2108      	movs	r1, #8
            if (snake->x == nibble.x && snake->y == nibble.y)
            {
                for (int i = 0; i < 3; i++)
                    add_node(&snake);

                nibble.eaten = 1;
 8001a7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
                score++;
 8001a82:	f88d 000e 	strb.w	r0, [sp, #14]
                keyled_printscore(score, 0x08);
 8001a86:	f7ff fe15 	bl	80016b4 <keyled_printscore>
            }
        }

        oled_draw(field, *snake, nibble, buffer); //draw screen
 8001a8a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8001a8e:	9a04      	ldr	r2, [sp, #16]
 8001a90:	f8ad 3000 	strh.w	r3, [sp]
 8001a94:	9601      	str	r6, [sp, #4]
 8001a96:	f50d 6086 	add.w	r0, sp, #1072	; 0x430
 8001a9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001a9c:	ca06      	ldmia	r2, {r1, r2}
 8001a9e:	f7ff fb89 	bl	80011b4 <oled_draw>
        HAL_Delay(20); //put delay to not make the game to fast
 8001aa2:	2014      	movs	r0, #20
 8001aa4:	f7fe fbfe 	bl	80002a4 <HAL_Delay>

        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */

    }
 8001aa8:	e73c      	b.n	8001924 <main+0x1c8>
 8001aaa:	bf00      	nop

08001aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001aae:	2007      	movs	r0, #7
 8001ab0:	f7fe fc06 	bl	80002c0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	4611      	mov	r1, r2
 8001ab8:	f06f 000b 	mvn.w	r0, #11
 8001abc:	f7fe fc12 	bl	80002e4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	f06f 000a 	mvn.w	r0, #10
 8001ac8:	f7fe fc0c 	bl	80002e4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001acc:	2200      	movs	r2, #0
 8001ace:	4611      	mov	r1, r2
 8001ad0:	f06f 0009 	mvn.w	r0, #9
 8001ad4:	f7fe fc06 	bl	80002e4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	4611      	mov	r1, r2
 8001adc:	f06f 0004 	mvn.w	r0, #4
 8001ae0:	f7fe fc00 	bl	80002e4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	4611      	mov	r1, r2
 8001ae8:	f06f 0003 	mvn.w	r0, #3
 8001aec:	f7fe fbfa 	bl	80002e4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001af0:	2200      	movs	r2, #0
 8001af2:	4611      	mov	r1, r2
 8001af4:	f06f 0001 	mvn.w	r0, #1
 8001af8:	f7fe fbf4 	bl	80002e4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001afc:	2200      	movs	r2, #0
 8001afe:	4611      	mov	r1, r2
 8001b00:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001b08:	f7fe bbec 	b.w	80002e4 <HAL_NVIC_SetPriority>

08001b0c <HAL_UART_MspInit>:

  /* USER CODE END MspInit 1 */
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8001b0e:	6802      	ldr	r2, [r0, #0]
 8001b10:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <HAL_UART_MspInit+0x44>)
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d119      	bne.n	8001b4a <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <HAL_UART_MspInit+0x48>)
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1c:	480e      	ldr	r0, [pc, #56]	; (8001b58 <HAL_UART_MspInit+0x4c>)
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b20:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001b24:	641a      	str	r2, [r3, #64]	; 0x40
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	9b00      	ldr	r3, [sp, #0]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b30:	230c      	movs	r3, #12
 8001b32:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b40:	a901      	add	r1, sp, #4
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b42:	2307      	movs	r3, #7
 8001b44:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b46:	f7fe fc29 	bl	800039c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b4a:	b007      	add	sp, #28
 8001b4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b50:	40004400 	.word	0x40004400
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40020000 	.word	0x40020000

08001b5c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001b5c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b5e:	f7fe fb93 	bl	8000288 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 8001b66:	f7fe bc14 	b.w	8000392 <HAL_SYSTICK_IRQHandler>
	...

08001b6c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b6c:	490f      	ldr	r1, [pc, #60]	; (8001bac <SystemInit+0x40>)
 8001b6e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001b72:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001b7a:	4b0d      	ldr	r3, [pc, #52]	; (8001bb0 <SystemInit+0x44>)
 8001b7c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b7e:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001b80:	f042 0201 	orr.w	r2, r2, #1
 8001b84:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b86:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001b8e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b92:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001b94:	4a07      	ldr	r2, [pc, #28]	; (8001bb4 <SystemInit+0x48>)
 8001b96:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b9e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001ba0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ba2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001ba6:	608b      	str	r3, [r1, #8]
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000ed00 	.word	0xe000ed00
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	24003010 	.word	0x24003010

08001bb8 <__libc_init_array>:
 8001bb8:	b570      	push	{r4, r5, r6, lr}
 8001bba:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <__libc_init_array+0x3c>)
 8001bbc:	4c0e      	ldr	r4, [pc, #56]	; (8001bf8 <__libc_init_array+0x40>)
 8001bbe:	1ae4      	subs	r4, r4, r3
 8001bc0:	10a4      	asrs	r4, r4, #2
 8001bc2:	2500      	movs	r5, #0
 8001bc4:	461e      	mov	r6, r3
 8001bc6:	42a5      	cmp	r5, r4
 8001bc8:	d004      	beq.n	8001bd4 <__libc_init_array+0x1c>
 8001bca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001bce:	4798      	blx	r3
 8001bd0:	3501      	adds	r5, #1
 8001bd2:	e7f8      	b.n	8001bc6 <__libc_init_array+0xe>
 8001bd4:	f000 fbbc 	bl	8002350 <_init>
 8001bd8:	4c08      	ldr	r4, [pc, #32]	; (8001bfc <__libc_init_array+0x44>)
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <__libc_init_array+0x48>)
 8001bdc:	1ae4      	subs	r4, r4, r3
 8001bde:	10a4      	asrs	r4, r4, #2
 8001be0:	2500      	movs	r5, #0
 8001be2:	461e      	mov	r6, r3
 8001be4:	42a5      	cmp	r5, r4
 8001be6:	d004      	beq.n	8001bf2 <__libc_init_array+0x3a>
 8001be8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001bec:	4798      	blx	r3
 8001bee:	3501      	adds	r5, #1
 8001bf0:	e7f8      	b.n	8001be4 <__libc_init_array+0x2c>
 8001bf2:	bd70      	pop	{r4, r5, r6, pc}
 8001bf4:	08002390 	.word	0x08002390
 8001bf8:	08002390 	.word	0x08002390
 8001bfc:	08002394 	.word	0x08002394
 8001c00:	08002390 	.word	0x08002390

08001c04 <malloc>:
 8001c04:	4b02      	ldr	r3, [pc, #8]	; (8001c10 <malloc+0xc>)
 8001c06:	4601      	mov	r1, r0
 8001c08:	6818      	ldr	r0, [r3, #0]
 8001c0a:	f000 b80b 	b.w	8001c24 <_malloc_r>
 8001c0e:	bf00      	nop
 8001c10:	20000504 	.word	0x20000504

08001c14 <free>:
 8001c14:	4b02      	ldr	r3, [pc, #8]	; (8001c20 <free+0xc>)
 8001c16:	4601      	mov	r1, r0
 8001c18:	6818      	ldr	r0, [r3, #0]
 8001c1a:	f000 bacd 	b.w	80021b8 <_free_r>
 8001c1e:	bf00      	nop
 8001c20:	20000504 	.word	0x20000504

08001c24 <_malloc_r>:
 8001c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c28:	f101 040b 	add.w	r4, r1, #11
 8001c2c:	2c16      	cmp	r4, #22
 8001c2e:	b085      	sub	sp, #20
 8001c30:	4681      	mov	r9, r0
 8001c32:	d903      	bls.n	8001c3c <_malloc_r+0x18>
 8001c34:	f034 0407 	bics.w	r4, r4, #7
 8001c38:	d501      	bpl.n	8001c3e <_malloc_r+0x1a>
 8001c3a:	e002      	b.n	8001c42 <_malloc_r+0x1e>
 8001c3c:	2410      	movs	r4, #16
 8001c3e:	428c      	cmp	r4, r1
 8001c40:	d203      	bcs.n	8001c4a <_malloc_r+0x26>
 8001c42:	230c      	movs	r3, #12
 8001c44:	f8c9 3000 	str.w	r3, [r9]
 8001c48:	e1ea      	b.n	8002020 <_malloc_r+0x3fc>
 8001c4a:	4648      	mov	r0, r9
 8001c4c:	f000 fa12 	bl	8002074 <__malloc_lock>
 8001c50:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8001c54:	4d9e      	ldr	r5, [pc, #632]	; (8001ed0 <_malloc_r+0x2ac>)
 8001c56:	d217      	bcs.n	8001c88 <_malloc_r+0x64>
 8001c58:	f104 0208 	add.w	r2, r4, #8
 8001c5c:	442a      	add	r2, r5
 8001c5e:	f1a2 0108 	sub.w	r1, r2, #8
 8001c62:	6856      	ldr	r6, [r2, #4]
 8001c64:	428e      	cmp	r6, r1
 8001c66:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8001c6a:	d102      	bne.n	8001c72 <_malloc_r+0x4e>
 8001c6c:	68d6      	ldr	r6, [r2, #12]
 8001c6e:	42b2      	cmp	r2, r6
 8001c70:	d008      	beq.n	8001c84 <_malloc_r+0x60>
 8001c72:	6873      	ldr	r3, [r6, #4]
 8001c74:	68f2      	ldr	r2, [r6, #12]
 8001c76:	68b1      	ldr	r1, [r6, #8]
 8001c78:	f023 0303 	bic.w	r3, r3, #3
 8001c7c:	60ca      	str	r2, [r1, #12]
 8001c7e:	4433      	add	r3, r6
 8001c80:	6091      	str	r1, [r2, #8]
 8001c82:	e02f      	b.n	8001ce4 <_malloc_r+0xc0>
 8001c84:	3302      	adds	r3, #2
 8001c86:	e03d      	b.n	8001d04 <_malloc_r+0xe0>
 8001c88:	0a63      	lsrs	r3, r4, #9
 8001c8a:	d01a      	beq.n	8001cc2 <_malloc_r+0x9e>
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d802      	bhi.n	8001c96 <_malloc_r+0x72>
 8001c90:	09a3      	lsrs	r3, r4, #6
 8001c92:	3338      	adds	r3, #56	; 0x38
 8001c94:	e018      	b.n	8001cc8 <_malloc_r+0xa4>
 8001c96:	2b14      	cmp	r3, #20
 8001c98:	d801      	bhi.n	8001c9e <_malloc_r+0x7a>
 8001c9a:	335b      	adds	r3, #91	; 0x5b
 8001c9c:	e014      	b.n	8001cc8 <_malloc_r+0xa4>
 8001c9e:	2b54      	cmp	r3, #84	; 0x54
 8001ca0:	d802      	bhi.n	8001ca8 <_malloc_r+0x84>
 8001ca2:	0b23      	lsrs	r3, r4, #12
 8001ca4:	336e      	adds	r3, #110	; 0x6e
 8001ca6:	e00f      	b.n	8001cc8 <_malloc_r+0xa4>
 8001ca8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8001cac:	d802      	bhi.n	8001cb4 <_malloc_r+0x90>
 8001cae:	0be3      	lsrs	r3, r4, #15
 8001cb0:	3377      	adds	r3, #119	; 0x77
 8001cb2:	e009      	b.n	8001cc8 <_malloc_r+0xa4>
 8001cb4:	f240 5254 	movw	r2, #1364	; 0x554
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d804      	bhi.n	8001cc6 <_malloc_r+0xa2>
 8001cbc:	0ca3      	lsrs	r3, r4, #18
 8001cbe:	337c      	adds	r3, #124	; 0x7c
 8001cc0:	e002      	b.n	8001cc8 <_malloc_r+0xa4>
 8001cc2:	233f      	movs	r3, #63	; 0x3f
 8001cc4:	e000      	b.n	8001cc8 <_malloc_r+0xa4>
 8001cc6:	237e      	movs	r3, #126	; 0x7e
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8001cce:	f1a2 0008 	sub.w	r0, r2, #8
 8001cd2:	6856      	ldr	r6, [r2, #4]
 8001cd4:	e00c      	b.n	8001cf0 <_malloc_r+0xcc>
 8001cd6:	2900      	cmp	r1, #0
 8001cd8:	68f1      	ldr	r1, [r6, #12]
 8001cda:	db08      	blt.n	8001cee <_malloc_r+0xca>
 8001cdc:	68b3      	ldr	r3, [r6, #8]
 8001cde:	60d9      	str	r1, [r3, #12]
 8001ce0:	608b      	str	r3, [r1, #8]
 8001ce2:	18b3      	adds	r3, r6, r2
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	f042 0201 	orr.w	r2, r2, #1
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	e1a3      	b.n	8002036 <_malloc_r+0x412>
 8001cee:	460e      	mov	r6, r1
 8001cf0:	4286      	cmp	r6, r0
 8001cf2:	d006      	beq.n	8001d02 <_malloc_r+0xde>
 8001cf4:	6872      	ldr	r2, [r6, #4]
 8001cf6:	f022 0203 	bic.w	r2, r2, #3
 8001cfa:	1b11      	subs	r1, r2, r4
 8001cfc:	290f      	cmp	r1, #15
 8001cfe:	ddea      	ble.n	8001cd6 <_malloc_r+0xb2>
 8001d00:	3b01      	subs	r3, #1
 8001d02:	3301      	adds	r3, #1
 8001d04:	4a72      	ldr	r2, [pc, #456]	; (8001ed0 <_malloc_r+0x2ac>)
 8001d06:	692e      	ldr	r6, [r5, #16]
 8001d08:	f102 0708 	add.w	r7, r2, #8
 8001d0c:	42be      	cmp	r6, r7
 8001d0e:	4639      	mov	r1, r7
 8001d10:	d079      	beq.n	8001e06 <_malloc_r+0x1e2>
 8001d12:	6870      	ldr	r0, [r6, #4]
 8001d14:	f020 0003 	bic.w	r0, r0, #3
 8001d18:	ebc4 0e00 	rsb	lr, r4, r0
 8001d1c:	f1be 0f0f 	cmp.w	lr, #15
 8001d20:	dd0d      	ble.n	8001d3e <_malloc_r+0x11a>
 8001d22:	1933      	adds	r3, r6, r4
 8001d24:	f044 0401 	orr.w	r4, r4, #1
 8001d28:	6074      	str	r4, [r6, #4]
 8001d2a:	6153      	str	r3, [r2, #20]
 8001d2c:	6113      	str	r3, [r2, #16]
 8001d2e:	f04e 0201 	orr.w	r2, lr, #1
 8001d32:	60df      	str	r7, [r3, #12]
 8001d34:	609f      	str	r7, [r3, #8]
 8001d36:	605a      	str	r2, [r3, #4]
 8001d38:	f843 e00e 	str.w	lr, [r3, lr]
 8001d3c:	e17b      	b.n	8002036 <_malloc_r+0x412>
 8001d3e:	f1be 0f00 	cmp.w	lr, #0
 8001d42:	6157      	str	r7, [r2, #20]
 8001d44:	6117      	str	r7, [r2, #16]
 8001d46:	db05      	blt.n	8001d54 <_malloc_r+0x130>
 8001d48:	4430      	add	r0, r6
 8001d4a:	6843      	ldr	r3, [r0, #4]
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	6043      	str	r3, [r0, #4]
 8001d52:	e170      	b.n	8002036 <_malloc_r+0x412>
 8001d54:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001d58:	d215      	bcs.n	8001d86 <_malloc_r+0x162>
 8001d5a:	08c0      	lsrs	r0, r0, #3
 8001d5c:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 8001d60:	2701      	movs	r7, #1
 8001d62:	fa07 fe0e 	lsl.w	lr, r7, lr
 8001d66:	6857      	ldr	r7, [r2, #4]
 8001d68:	3001      	adds	r0, #1
 8001d6a:	ea4e 0707 	orr.w	r7, lr, r7
 8001d6e:	6057      	str	r7, [r2, #4]
 8001d70:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 8001d74:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 8001d78:	f8c6 e008 	str.w	lr, [r6, #8]
 8001d7c:	3f08      	subs	r7, #8
 8001d7e:	60f7      	str	r7, [r6, #12]
 8001d80:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 8001d84:	e03d      	b.n	8001e02 <_malloc_r+0x1de>
 8001d86:	0a42      	lsrs	r2, r0, #9
 8001d88:	2a04      	cmp	r2, #4
 8001d8a:	d802      	bhi.n	8001d92 <_malloc_r+0x16e>
 8001d8c:	0982      	lsrs	r2, r0, #6
 8001d8e:	3238      	adds	r2, #56	; 0x38
 8001d90:	e015      	b.n	8001dbe <_malloc_r+0x19a>
 8001d92:	2a14      	cmp	r2, #20
 8001d94:	d801      	bhi.n	8001d9a <_malloc_r+0x176>
 8001d96:	325b      	adds	r2, #91	; 0x5b
 8001d98:	e011      	b.n	8001dbe <_malloc_r+0x19a>
 8001d9a:	2a54      	cmp	r2, #84	; 0x54
 8001d9c:	d802      	bhi.n	8001da4 <_malloc_r+0x180>
 8001d9e:	0b02      	lsrs	r2, r0, #12
 8001da0:	326e      	adds	r2, #110	; 0x6e
 8001da2:	e00c      	b.n	8001dbe <_malloc_r+0x19a>
 8001da4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8001da8:	d802      	bhi.n	8001db0 <_malloc_r+0x18c>
 8001daa:	0bc2      	lsrs	r2, r0, #15
 8001dac:	3277      	adds	r2, #119	; 0x77
 8001dae:	e006      	b.n	8001dbe <_malloc_r+0x19a>
 8001db0:	f240 5754 	movw	r7, #1364	; 0x554
 8001db4:	42ba      	cmp	r2, r7
 8001db6:	bf9a      	itte	ls
 8001db8:	0c82      	lsrls	r2, r0, #18
 8001dba:	327c      	addls	r2, #124	; 0x7c
 8001dbc:	227e      	movhi	r2, #126	; 0x7e
 8001dbe:	1c57      	adds	r7, r2, #1
 8001dc0:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8001dc4:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8001dc8:	f8df c104 	ldr.w	ip, [pc, #260]	; 8001ed0 <_malloc_r+0x2ac>
 8001dcc:	45be      	cmp	lr, r7
 8001dce:	d10d      	bne.n	8001dec <_malloc_r+0x1c8>
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	1092      	asrs	r2, r2, #2
 8001dd4:	fa00 f202 	lsl.w	r2, r0, r2
 8001dd8:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8001ddc:	4310      	orrs	r0, r2
 8001dde:	f8cc 0004 	str.w	r0, [ip, #4]
 8001de2:	4672      	mov	r2, lr
 8001de4:	e009      	b.n	8001dfa <_malloc_r+0x1d6>
 8001de6:	68bf      	ldr	r7, [r7, #8]
 8001de8:	45be      	cmp	lr, r7
 8001dea:	d004      	beq.n	8001df6 <_malloc_r+0x1d2>
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	f022 0203 	bic.w	r2, r2, #3
 8001df2:	4290      	cmp	r0, r2
 8001df4:	d3f7      	bcc.n	8001de6 <_malloc_r+0x1c2>
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	46be      	mov	lr, r7
 8001dfa:	60f2      	str	r2, [r6, #12]
 8001dfc:	f8c6 e008 	str.w	lr, [r6, #8]
 8001e00:	6096      	str	r6, [r2, #8]
 8001e02:	f8ce 600c 	str.w	r6, [lr, #12]
 8001e06:	2001      	movs	r0, #1
 8001e08:	109a      	asrs	r2, r3, #2
 8001e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e0e:	6868      	ldr	r0, [r5, #4]
 8001e10:	4282      	cmp	r2, r0
 8001e12:	d85f      	bhi.n	8001ed4 <_malloc_r+0x2b0>
 8001e14:	4202      	tst	r2, r0
 8001e16:	d106      	bne.n	8001e26 <_malloc_r+0x202>
 8001e18:	f023 0303 	bic.w	r3, r3, #3
 8001e1c:	0052      	lsls	r2, r2, #1
 8001e1e:	4202      	tst	r2, r0
 8001e20:	f103 0304 	add.w	r3, r3, #4
 8001e24:	d0fa      	beq.n	8001e1c <_malloc_r+0x1f8>
 8001e26:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 8001e2a:	46c2      	mov	sl, r8
 8001e2c:	469c      	mov	ip, r3
 8001e2e:	f8da 600c 	ldr.w	r6, [sl, #12]
 8001e32:	4556      	cmp	r6, sl
 8001e34:	d02c      	beq.n	8001e90 <_malloc_r+0x26c>
 8001e36:	6870      	ldr	r0, [r6, #4]
 8001e38:	68f7      	ldr	r7, [r6, #12]
 8001e3a:	f020 0003 	bic.w	r0, r0, #3
 8001e3e:	ebc4 0e00 	rsb	lr, r4, r0
 8001e42:	f1be 0f0f 	cmp.w	lr, #15
 8001e46:	dd11      	ble.n	8001e6c <_malloc_r+0x248>
 8001e48:	1933      	adds	r3, r6, r4
 8001e4a:	f044 0401 	orr.w	r4, r4, #1
 8001e4e:	6074      	str	r4, [r6, #4]
 8001e50:	f856 2f08 	ldr.w	r2, [r6, #8]!
 8001e54:	60d7      	str	r7, [r2, #12]
 8001e56:	60ba      	str	r2, [r7, #8]
 8001e58:	f04e 0201 	orr.w	r2, lr, #1
 8001e5c:	616b      	str	r3, [r5, #20]
 8001e5e:	612b      	str	r3, [r5, #16]
 8001e60:	60d9      	str	r1, [r3, #12]
 8001e62:	6099      	str	r1, [r3, #8]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	f843 e00e 	str.w	lr, [r3, lr]
 8001e6a:	e00b      	b.n	8001e84 <_malloc_r+0x260>
 8001e6c:	f1be 0f00 	cmp.w	lr, #0
 8001e70:	db0c      	blt.n	8001e8c <_malloc_r+0x268>
 8001e72:	1833      	adds	r3, r6, r0
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	f042 0201 	orr.w	r2, r2, #1
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8001e80:	60df      	str	r7, [r3, #12]
 8001e82:	60bb      	str	r3, [r7, #8]
 8001e84:	4648      	mov	r0, r9
 8001e86:	f000 f8f6 	bl	8002076 <__malloc_unlock>
 8001e8a:	e0d8      	b.n	800203e <_malloc_r+0x41a>
 8001e8c:	463e      	mov	r6, r7
 8001e8e:	e7d0      	b.n	8001e32 <_malloc_r+0x20e>
 8001e90:	f10c 0c01 	add.w	ip, ip, #1
 8001e94:	f01c 0f03 	tst.w	ip, #3
 8001e98:	f10a 0a08 	add.w	sl, sl, #8
 8001e9c:	d1c7      	bne.n	8001e2e <_malloc_r+0x20a>
 8001e9e:	0798      	lsls	r0, r3, #30
 8001ea0:	d104      	bne.n	8001eac <_malloc_r+0x288>
 8001ea2:	686b      	ldr	r3, [r5, #4]
 8001ea4:	ea23 0302 	bic.w	r3, r3, r2
 8001ea8:	606b      	str	r3, [r5, #4]
 8001eaa:	e005      	b.n	8001eb8 <_malloc_r+0x294>
 8001eac:	f858 0908 	ldr.w	r0, [r8], #-8
 8001eb0:	4580      	cmp	r8, r0
 8001eb2:	f103 33ff 	add.w	r3, r3, #4294967295
 8001eb6:	d0f2      	beq.n	8001e9e <_malloc_r+0x27a>
 8001eb8:	6868      	ldr	r0, [r5, #4]
 8001eba:	0052      	lsls	r2, r2, #1
 8001ebc:	4282      	cmp	r2, r0
 8001ebe:	d809      	bhi.n	8001ed4 <_malloc_r+0x2b0>
 8001ec0:	b142      	cbz	r2, 8001ed4 <_malloc_r+0x2b0>
 8001ec2:	4663      	mov	r3, ip
 8001ec4:	4202      	tst	r2, r0
 8001ec6:	d1ae      	bne.n	8001e26 <_malloc_r+0x202>
 8001ec8:	3304      	adds	r3, #4
 8001eca:	0052      	lsls	r2, r2, #1
 8001ecc:	e7fa      	b.n	8001ec4 <_malloc_r+0x2a0>
 8001ece:	bf00      	nop
 8001ed0:	20000004 	.word	0x20000004
 8001ed4:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8001ed8:	f8db 6004 	ldr.w	r6, [fp, #4]
 8001edc:	f026 0603 	bic.w	r6, r6, #3
 8001ee0:	42b4      	cmp	r4, r6
 8001ee2:	d803      	bhi.n	8001eec <_malloc_r+0x2c8>
 8001ee4:	1b33      	subs	r3, r6, r4
 8001ee6:	2b0f      	cmp	r3, #15
 8001ee8:	f300 809c 	bgt.w	8002024 <_malloc_r+0x400>
 8001eec:	4a56      	ldr	r2, [pc, #344]	; (8002048 <_malloc_r+0x424>)
 8001eee:	4957      	ldr	r1, [pc, #348]	; (800204c <_malloc_r+0x428>)
 8001ef0:	6812      	ldr	r2, [r2, #0]
 8001ef2:	6808      	ldr	r0, [r1, #0]
 8001ef4:	9101      	str	r1, [sp, #4]
 8001ef6:	f102 0810 	add.w	r8, r2, #16
 8001efa:	4a55      	ldr	r2, [pc, #340]	; (8002050 <_malloc_r+0x42c>)
 8001efc:	9203      	str	r2, [sp, #12]
 8001efe:	3001      	adds	r0, #1
 8001f00:	bf18      	it	ne
 8001f02:	f102 31ff 	addne.w	r1, r2, #4294967295
 8001f06:	44a0      	add	r8, r4
 8001f08:	bf1e      	ittt	ne
 8001f0a:	4488      	addne	r8, r1
 8001f0c:	4251      	negne	r1, r2
 8001f0e:	ea01 0808 	andne.w	r8, r1, r8
 8001f12:	eb0b 0306 	add.w	r3, fp, r6
 8001f16:	4641      	mov	r1, r8
 8001f18:	4648      	mov	r0, r9
 8001f1a:	9302      	str	r3, [sp, #8]
 8001f1c:	f000 f8e6 	bl	80020ec <_sbrk_r>
 8001f20:	1c42      	adds	r2, r0, #1
 8001f22:	4607      	mov	r7, r0
 8001f24:	d06f      	beq.n	8002006 <_malloc_r+0x3e2>
 8001f26:	9b02      	ldr	r3, [sp, #8]
 8001f28:	9a03      	ldr	r2, [sp, #12]
 8001f2a:	4283      	cmp	r3, r0
 8001f2c:	d901      	bls.n	8001f32 <_malloc_r+0x30e>
 8001f2e:	45ab      	cmp	fp, r5
 8001f30:	d169      	bne.n	8002006 <_malloc_r+0x3e2>
 8001f32:	f8df a128 	ldr.w	sl, [pc, #296]	; 800205c <_malloc_r+0x438>
 8001f36:	f8df c128 	ldr.w	ip, [pc, #296]	; 8002060 <_malloc_r+0x43c>
 8001f3a:	f8da 0000 	ldr.w	r0, [sl]
 8001f3e:	42bb      	cmp	r3, r7
 8001f40:	4440      	add	r0, r8
 8001f42:	f8ca 0000 	str.w	r0, [sl]
 8001f46:	d108      	bne.n	8001f5a <_malloc_r+0x336>
 8001f48:	ea13 0f0c 	tst.w	r3, ip
 8001f4c:	d105      	bne.n	8001f5a <_malloc_r+0x336>
 8001f4e:	68ab      	ldr	r3, [r5, #8]
 8001f50:	4446      	add	r6, r8
 8001f52:	f046 0601 	orr.w	r6, r6, #1
 8001f56:	605e      	str	r6, [r3, #4]
 8001f58:	e049      	b.n	8001fee <_malloc_r+0x3ca>
 8001f5a:	9901      	ldr	r1, [sp, #4]
 8001f5c:	f8d1 e000 	ldr.w	lr, [r1]
 8001f60:	f1be 3fff 	cmp.w	lr, #4294967295
 8001f64:	bf15      	itete	ne
 8001f66:	1afb      	subne	r3, r7, r3
 8001f68:	4b38      	ldreq	r3, [pc, #224]	; (800204c <_malloc_r+0x428>)
 8001f6a:	181b      	addne	r3, r3, r0
 8001f6c:	601f      	streq	r7, [r3, #0]
 8001f6e:	bf18      	it	ne
 8001f70:	f8ca 3000 	strne.w	r3, [sl]
 8001f74:	f017 0307 	ands.w	r3, r7, #7
 8001f78:	bf1c      	itt	ne
 8001f7a:	f1c3 0308 	rsbne	r3, r3, #8
 8001f7e:	18ff      	addne	r7, r7, r3
 8001f80:	44b8      	add	r8, r7
 8001f82:	441a      	add	r2, r3
 8001f84:	ea08 080c 	and.w	r8, r8, ip
 8001f88:	ebc8 0802 	rsb	r8, r8, r2
 8001f8c:	4641      	mov	r1, r8
 8001f8e:	4648      	mov	r0, r9
 8001f90:	f000 f8ac 	bl	80020ec <_sbrk_r>
 8001f94:	1c43      	adds	r3, r0, #1
 8001f96:	bf04      	itt	eq
 8001f98:	4638      	moveq	r0, r7
 8001f9a:	f04f 0800 	moveq.w	r8, #0
 8001f9e:	f8da 3000 	ldr.w	r3, [sl]
 8001fa2:	60af      	str	r7, [r5, #8]
 8001fa4:	1bc2      	subs	r2, r0, r7
 8001fa6:	4442      	add	r2, r8
 8001fa8:	4443      	add	r3, r8
 8001faa:	f042 0201 	orr.w	r2, r2, #1
 8001fae:	45ab      	cmp	fp, r5
 8001fb0:	f8ca 3000 	str.w	r3, [sl]
 8001fb4:	607a      	str	r2, [r7, #4]
 8001fb6:	d01a      	beq.n	8001fee <_malloc_r+0x3ca>
 8001fb8:	2e0f      	cmp	r6, #15
 8001fba:	d802      	bhi.n	8001fc2 <_malloc_r+0x39e>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	607b      	str	r3, [r7, #4]
 8001fc0:	e021      	b.n	8002006 <_malloc_r+0x3e2>
 8001fc2:	f8db 3004 	ldr.w	r3, [fp, #4]
 8001fc6:	3e0c      	subs	r6, #12
 8001fc8:	f026 0607 	bic.w	r6, r6, #7
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	4333      	orrs	r3, r6
 8001fd2:	f8cb 3004 	str.w	r3, [fp, #4]
 8001fd6:	eb0b 0306 	add.w	r3, fp, r6
 8001fda:	2205      	movs	r2, #5
 8001fdc:	2e0f      	cmp	r6, #15
 8001fde:	605a      	str	r2, [r3, #4]
 8001fe0:	609a      	str	r2, [r3, #8]
 8001fe2:	d904      	bls.n	8001fee <_malloc_r+0x3ca>
 8001fe4:	f10b 0108 	add.w	r1, fp, #8
 8001fe8:	4648      	mov	r0, r9
 8001fea:	f000 f8e5 	bl	80021b8 <_free_r>
 8001fee:	4a19      	ldr	r2, [pc, #100]	; (8002054 <_malloc_r+0x430>)
 8001ff0:	f8da 3000 	ldr.w	r3, [sl]
 8001ff4:	6811      	ldr	r1, [r2, #0]
 8001ff6:	428b      	cmp	r3, r1
 8001ff8:	bf88      	it	hi
 8001ffa:	6013      	strhi	r3, [r2, #0]
 8001ffc:	4a16      	ldr	r2, [pc, #88]	; (8002058 <_malloc_r+0x434>)
 8001ffe:	6811      	ldr	r1, [r2, #0]
 8002000:	428b      	cmp	r3, r1
 8002002:	bf88      	it	hi
 8002004:	6013      	strhi	r3, [r2, #0]
 8002006:	68ab      	ldr	r3, [r5, #8]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	f022 0203 	bic.w	r2, r2, #3
 800200e:	4294      	cmp	r4, r2
 8002010:	eba2 0304 	sub.w	r3, r2, r4
 8002014:	d801      	bhi.n	800201a <_malloc_r+0x3f6>
 8002016:	2b0f      	cmp	r3, #15
 8002018:	dc04      	bgt.n	8002024 <_malloc_r+0x400>
 800201a:	4648      	mov	r0, r9
 800201c:	f000 f82b 	bl	8002076 <__malloc_unlock>
 8002020:	2600      	movs	r6, #0
 8002022:	e00c      	b.n	800203e <_malloc_r+0x41a>
 8002024:	68ae      	ldr	r6, [r5, #8]
 8002026:	f044 0201 	orr.w	r2, r4, #1
 800202a:	4434      	add	r4, r6
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	6072      	str	r2, [r6, #4]
 8002032:	60ac      	str	r4, [r5, #8]
 8002034:	6063      	str	r3, [r4, #4]
 8002036:	4648      	mov	r0, r9
 8002038:	f000 f81d 	bl	8002076 <__malloc_unlock>
 800203c:	3608      	adds	r6, #8
 800203e:	4630      	mov	r0, r6
 8002040:	b005      	add	sp, #20
 8002042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002046:	bf00      	nop
 8002048:	2000052c 	.word	0x2000052c
 800204c:	20000410 	.word	0x20000410
 8002050:	00000080 	.word	0x00000080
 8002054:	20000528 	.word	0x20000528
 8002058:	20000524 	.word	0x20000524
 800205c:	20000530 	.word	0x20000530
 8002060:	0000007f 	.word	0x0000007f

08002064 <memset>:
 8002064:	4402      	add	r2, r0
 8002066:	4603      	mov	r3, r0
 8002068:	4293      	cmp	r3, r2
 800206a:	d002      	beq.n	8002072 <memset+0xe>
 800206c:	f803 1b01 	strb.w	r1, [r3], #1
 8002070:	e7fa      	b.n	8002068 <memset+0x4>
 8002072:	4770      	bx	lr

08002074 <__malloc_lock>:
 8002074:	4770      	bx	lr

08002076 <__malloc_unlock>:
 8002076:	4770      	bx	lr

08002078 <rand>:
 8002078:	4b19      	ldr	r3, [pc, #100]	; (80020e0 <rand+0x68>)
 800207a:	b510      	push	{r4, lr}
 800207c:	681c      	ldr	r4, [r3, #0]
 800207e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002080:	b9d3      	cbnz	r3, 80020b8 <rand+0x40>
 8002082:	2018      	movs	r0, #24
 8002084:	f7ff fdbe 	bl	8001c04 <malloc>
 8002088:	f243 330e 	movw	r3, #13070	; 0x330e
 800208c:	63a0      	str	r0, [r4, #56]	; 0x38
 800208e:	8003      	strh	r3, [r0, #0]
 8002090:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8002094:	8043      	strh	r3, [r0, #2]
 8002096:	f241 2334 	movw	r3, #4660	; 0x1234
 800209a:	8083      	strh	r3, [r0, #4]
 800209c:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80020a0:	80c3      	strh	r3, [r0, #6]
 80020a2:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80020a6:	8103      	strh	r3, [r0, #8]
 80020a8:	2305      	movs	r3, #5
 80020aa:	8143      	strh	r3, [r0, #10]
 80020ac:	230b      	movs	r3, #11
 80020ae:	8183      	strh	r3, [r0, #12]
 80020b0:	2201      	movs	r2, #1
 80020b2:	2300      	movs	r3, #0
 80020b4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80020b8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80020ba:	4c0a      	ldr	r4, [pc, #40]	; (80020e4 <rand+0x6c>)
 80020bc:	690b      	ldr	r3, [r1, #16]
 80020be:	6948      	ldr	r0, [r1, #20]
 80020c0:	4a09      	ldr	r2, [pc, #36]	; (80020e8 <rand+0x70>)
 80020c2:	435c      	muls	r4, r3
 80020c4:	fb02 4000 	mla	r0, r2, r0, r4
 80020c8:	fba3 2302 	umull	r2, r3, r3, r2
 80020cc:	3201      	adds	r2, #1
 80020ce:	4403      	add	r3, r0
 80020d0:	f143 0300 	adc.w	r3, r3, #0
 80020d4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80020d8:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80020dc:	bd10      	pop	{r4, pc}
 80020de:	bf00      	nop
 80020e0:	20000504 	.word	0x20000504
 80020e4:	5851f42d 	.word	0x5851f42d
 80020e8:	4c957f2d 	.word	0x4c957f2d

080020ec <_sbrk_r>:
 80020ec:	b538      	push	{r3, r4, r5, lr}
 80020ee:	4c06      	ldr	r4, [pc, #24]	; (8002108 <_sbrk_r+0x1c>)
 80020f0:	2300      	movs	r3, #0
 80020f2:	4605      	mov	r5, r0
 80020f4:	4608      	mov	r0, r1
 80020f6:	6023      	str	r3, [r4, #0]
 80020f8:	f000 f91c 	bl	8002334 <_sbrk>
 80020fc:	1c43      	adds	r3, r0, #1
 80020fe:	d102      	bne.n	8002106 <_sbrk_r+0x1a>
 8002100:	6823      	ldr	r3, [r4, #0]
 8002102:	b103      	cbz	r3, 8002106 <_sbrk_r+0x1a>
 8002104:	602b      	str	r3, [r5, #0]
 8002106:	bd38      	pop	{r3, r4, r5, pc}
 8002108:	200005a0 	.word	0x200005a0

0800210c <_malloc_trim_r>:
 800210c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002110:	4f25      	ldr	r7, [pc, #148]	; (80021a8 <_malloc_trim_r+0x9c>)
 8002112:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80021b4 <_malloc_trim_r+0xa8>
 8002116:	4689      	mov	r9, r1
 8002118:	4606      	mov	r6, r0
 800211a:	f7ff ffab 	bl	8002074 <__malloc_lock>
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	685d      	ldr	r5, [r3, #4]
 8002122:	f1a8 0411 	sub.w	r4, r8, #17
 8002126:	f025 0503 	bic.w	r5, r5, #3
 800212a:	442c      	add	r4, r5
 800212c:	ebc9 0404 	rsb	r4, r9, r4
 8002130:	fbb4 f4f8 	udiv	r4, r4, r8
 8002134:	3c01      	subs	r4, #1
 8002136:	fb08 f404 	mul.w	r4, r8, r4
 800213a:	4544      	cmp	r4, r8
 800213c:	da05      	bge.n	800214a <_malloc_trim_r+0x3e>
 800213e:	4630      	mov	r0, r6
 8002140:	f7ff ff99 	bl	8002076 <__malloc_unlock>
 8002144:	2000      	movs	r0, #0
 8002146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800214a:	2100      	movs	r1, #0
 800214c:	4630      	mov	r0, r6
 800214e:	f7ff ffcd 	bl	80020ec <_sbrk_r>
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	442b      	add	r3, r5
 8002156:	4298      	cmp	r0, r3
 8002158:	d1f1      	bne.n	800213e <_malloc_trim_r+0x32>
 800215a:	4261      	negs	r1, r4
 800215c:	4630      	mov	r0, r6
 800215e:	f7ff ffc5 	bl	80020ec <_sbrk_r>
 8002162:	3001      	adds	r0, #1
 8002164:	d110      	bne.n	8002188 <_malloc_trim_r+0x7c>
 8002166:	2100      	movs	r1, #0
 8002168:	4630      	mov	r0, r6
 800216a:	f7ff ffbf 	bl	80020ec <_sbrk_r>
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	1a83      	subs	r3, r0, r2
 8002172:	2b0f      	cmp	r3, #15
 8002174:	dde3      	ble.n	800213e <_malloc_trim_r+0x32>
 8002176:	490d      	ldr	r1, [pc, #52]	; (80021ac <_malloc_trim_r+0xa0>)
 8002178:	6809      	ldr	r1, [r1, #0]
 800217a:	1a40      	subs	r0, r0, r1
 800217c:	490c      	ldr	r1, [pc, #48]	; (80021b0 <_malloc_trim_r+0xa4>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	6008      	str	r0, [r1, #0]
 8002184:	6053      	str	r3, [r2, #4]
 8002186:	e7da      	b.n	800213e <_malloc_trim_r+0x32>
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	4a09      	ldr	r2, [pc, #36]	; (80021b0 <_malloc_trim_r+0xa4>)
 800218c:	1b2d      	subs	r5, r5, r4
 800218e:	f045 0501 	orr.w	r5, r5, #1
 8002192:	605d      	str	r5, [r3, #4]
 8002194:	6813      	ldr	r3, [r2, #0]
 8002196:	4630      	mov	r0, r6
 8002198:	1b1c      	subs	r4, r3, r4
 800219a:	6014      	str	r4, [r2, #0]
 800219c:	f7ff ff6b 	bl	8002076 <__malloc_unlock>
 80021a0:	2001      	movs	r0, #1
 80021a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80021a6:	bf00      	nop
 80021a8:	20000004 	.word	0x20000004
 80021ac:	20000410 	.word	0x20000410
 80021b0:	20000530 	.word	0x20000530
 80021b4:	00000080 	.word	0x00000080

080021b8 <_free_r>:
 80021b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021bc:	4604      	mov	r4, r0
 80021be:	4688      	mov	r8, r1
 80021c0:	2900      	cmp	r1, #0
 80021c2:	f000 80ad 	beq.w	8002320 <_free_r+0x168>
 80021c6:	f7ff ff55 	bl	8002074 <__malloc_lock>
 80021ca:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80021ce:	4d55      	ldr	r5, [pc, #340]	; (8002324 <_free_r+0x16c>)
 80021d0:	f022 0001 	bic.w	r0, r2, #1
 80021d4:	f1a8 0308 	sub.w	r3, r8, #8
 80021d8:	181f      	adds	r7, r3, r0
 80021da:	68a9      	ldr	r1, [r5, #8]
 80021dc:	687e      	ldr	r6, [r7, #4]
 80021de:	428f      	cmp	r7, r1
 80021e0:	f026 0603 	bic.w	r6, r6, #3
 80021e4:	f002 0201 	and.w	r2, r2, #1
 80021e8:	d11b      	bne.n	8002222 <_free_r+0x6a>
 80021ea:	4430      	add	r0, r6
 80021ec:	b93a      	cbnz	r2, 80021fe <_free_r+0x46>
 80021ee:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80021f2:	1a9b      	subs	r3, r3, r2
 80021f4:	4410      	add	r0, r2
 80021f6:	6899      	ldr	r1, [r3, #8]
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	60ca      	str	r2, [r1, #12]
 80021fc:	6091      	str	r1, [r2, #8]
 80021fe:	f040 0201 	orr.w	r2, r0, #1
 8002202:	605a      	str	r2, [r3, #4]
 8002204:	60ab      	str	r3, [r5, #8]
 8002206:	4b48      	ldr	r3, [pc, #288]	; (8002328 <_free_r+0x170>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4298      	cmp	r0, r3
 800220c:	d304      	bcc.n	8002218 <_free_r+0x60>
 800220e:	4b47      	ldr	r3, [pc, #284]	; (800232c <_free_r+0x174>)
 8002210:	4620      	mov	r0, r4
 8002212:	6819      	ldr	r1, [r3, #0]
 8002214:	f7ff ff7a 	bl	800210c <_malloc_trim_r>
 8002218:	4620      	mov	r0, r4
 800221a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800221e:	f7ff bf2a 	b.w	8002076 <__malloc_unlock>
 8002222:	607e      	str	r6, [r7, #4]
 8002224:	b97a      	cbnz	r2, 8002246 <_free_r+0x8e>
 8002226:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800222a:	1a5b      	subs	r3, r3, r1
 800222c:	4408      	add	r0, r1
 800222e:	6899      	ldr	r1, [r3, #8]
 8002230:	f105 0e08 	add.w	lr, r5, #8
 8002234:	4571      	cmp	r1, lr
 8002236:	d008      	beq.n	800224a <_free_r+0x92>
 8002238:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800223c:	f8c1 e00c 	str.w	lr, [r1, #12]
 8002240:	f8ce 1008 	str.w	r1, [lr, #8]
 8002244:	e002      	b.n	800224c <_free_r+0x94>
 8002246:	2200      	movs	r2, #0
 8002248:	e000      	b.n	800224c <_free_r+0x94>
 800224a:	2201      	movs	r2, #1
 800224c:	19b9      	adds	r1, r7, r6
 800224e:	6849      	ldr	r1, [r1, #4]
 8002250:	07c9      	lsls	r1, r1, #31
 8002252:	d40e      	bmi.n	8002272 <_free_r+0xba>
 8002254:	4430      	add	r0, r6
 8002256:	68b9      	ldr	r1, [r7, #8]
 8002258:	b942      	cbnz	r2, 800226c <_free_r+0xb4>
 800225a:	4e35      	ldr	r6, [pc, #212]	; (8002330 <_free_r+0x178>)
 800225c:	42b1      	cmp	r1, r6
 800225e:	d105      	bne.n	800226c <_free_r+0xb4>
 8002260:	616b      	str	r3, [r5, #20]
 8002262:	612b      	str	r3, [r5, #16]
 8002264:	2201      	movs	r2, #1
 8002266:	60d9      	str	r1, [r3, #12]
 8002268:	6099      	str	r1, [r3, #8]
 800226a:	e002      	b.n	8002272 <_free_r+0xba>
 800226c:	68fe      	ldr	r6, [r7, #12]
 800226e:	60ce      	str	r6, [r1, #12]
 8002270:	60b1      	str	r1, [r6, #8]
 8002272:	f040 0101 	orr.w	r1, r0, #1
 8002276:	6059      	str	r1, [r3, #4]
 8002278:	5018      	str	r0, [r3, r0]
 800227a:	2a00      	cmp	r2, #0
 800227c:	d1cc      	bne.n	8002218 <_free_r+0x60>
 800227e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002282:	d212      	bcs.n	80022aa <_free_r+0xf2>
 8002284:	08c0      	lsrs	r0, r0, #3
 8002286:	1081      	asrs	r1, r0, #2
 8002288:	2201      	movs	r2, #1
 800228a:	fa02 f101 	lsl.w	r1, r2, r1
 800228e:	686a      	ldr	r2, [r5, #4]
 8002290:	3001      	adds	r0, #1
 8002292:	430a      	orrs	r2, r1
 8002294:	606a      	str	r2, [r5, #4]
 8002296:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800229a:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800229e:	6099      	str	r1, [r3, #8]
 80022a0:	3a08      	subs	r2, #8
 80022a2:	60da      	str	r2, [r3, #12]
 80022a4:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 80022a8:	e038      	b.n	800231c <_free_r+0x164>
 80022aa:	0a42      	lsrs	r2, r0, #9
 80022ac:	2a04      	cmp	r2, #4
 80022ae:	d802      	bhi.n	80022b6 <_free_r+0xfe>
 80022b0:	0982      	lsrs	r2, r0, #6
 80022b2:	3238      	adds	r2, #56	; 0x38
 80022b4:	e015      	b.n	80022e2 <_free_r+0x12a>
 80022b6:	2a14      	cmp	r2, #20
 80022b8:	d801      	bhi.n	80022be <_free_r+0x106>
 80022ba:	325b      	adds	r2, #91	; 0x5b
 80022bc:	e011      	b.n	80022e2 <_free_r+0x12a>
 80022be:	2a54      	cmp	r2, #84	; 0x54
 80022c0:	d802      	bhi.n	80022c8 <_free_r+0x110>
 80022c2:	0b02      	lsrs	r2, r0, #12
 80022c4:	326e      	adds	r2, #110	; 0x6e
 80022c6:	e00c      	b.n	80022e2 <_free_r+0x12a>
 80022c8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80022cc:	d802      	bhi.n	80022d4 <_free_r+0x11c>
 80022ce:	0bc2      	lsrs	r2, r0, #15
 80022d0:	3277      	adds	r2, #119	; 0x77
 80022d2:	e006      	b.n	80022e2 <_free_r+0x12a>
 80022d4:	f240 5154 	movw	r1, #1364	; 0x554
 80022d8:	428a      	cmp	r2, r1
 80022da:	bf9a      	itte	ls
 80022dc:	0c82      	lsrls	r2, r0, #18
 80022de:	327c      	addls	r2, #124	; 0x7c
 80022e0:	227e      	movhi	r2, #126	; 0x7e
 80022e2:	1c51      	adds	r1, r2, #1
 80022e4:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80022e8:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80022ec:	4f0d      	ldr	r7, [pc, #52]	; (8002324 <_free_r+0x16c>)
 80022ee:	428e      	cmp	r6, r1
 80022f0:	d10b      	bne.n	800230a <_free_r+0x152>
 80022f2:	2101      	movs	r1, #1
 80022f4:	1092      	asrs	r2, r2, #2
 80022f6:	fa01 f202 	lsl.w	r2, r1, r2
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	4311      	orrs	r1, r2
 80022fe:	6079      	str	r1, [r7, #4]
 8002300:	4631      	mov	r1, r6
 8002302:	e008      	b.n	8002316 <_free_r+0x15e>
 8002304:	6889      	ldr	r1, [r1, #8]
 8002306:	428e      	cmp	r6, r1
 8002308:	d004      	beq.n	8002314 <_free_r+0x15c>
 800230a:	684a      	ldr	r2, [r1, #4]
 800230c:	f022 0203 	bic.w	r2, r2, #3
 8002310:	4290      	cmp	r0, r2
 8002312:	d3f7      	bcc.n	8002304 <_free_r+0x14c>
 8002314:	68ce      	ldr	r6, [r1, #12]
 8002316:	60de      	str	r6, [r3, #12]
 8002318:	6099      	str	r1, [r3, #8]
 800231a:	60b3      	str	r3, [r6, #8]
 800231c:	60cb      	str	r3, [r1, #12]
 800231e:	e77b      	b.n	8002218 <_free_r+0x60>
 8002320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002324:	20000004 	.word	0x20000004
 8002328:	2000040c 	.word	0x2000040c
 800232c:	2000052c 	.word	0x2000052c
 8002330:	2000000c 	.word	0x2000000c

08002334 <_sbrk>:
 8002334:	4b04      	ldr	r3, [pc, #16]	; (8002348 <_sbrk+0x14>)
 8002336:	6819      	ldr	r1, [r3, #0]
 8002338:	4602      	mov	r2, r0
 800233a:	b909      	cbnz	r1, 8002340 <_sbrk+0xc>
 800233c:	4903      	ldr	r1, [pc, #12]	; (800234c <_sbrk+0x18>)
 800233e:	6019      	str	r1, [r3, #0]
 8002340:	6818      	ldr	r0, [r3, #0]
 8002342:	4402      	add	r2, r0
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	4770      	bx	lr
 8002348:	20000558 	.word	0x20000558
 800234c:	200005a4 	.word	0x200005a4

08002350 <_init>:
 8002350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002352:	bf00      	nop
 8002354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002356:	bc08      	pop	{r3}
 8002358:	469e      	mov	lr, r3
 800235a:	4770      	bx	lr

0800235c <_fini>:
 800235c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800235e:	bf00      	nop
 8002360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002362:	bc08      	pop	{r3}
 8002364:	469e      	mov	lr, r3
 8002366:	4770      	bx	lr
